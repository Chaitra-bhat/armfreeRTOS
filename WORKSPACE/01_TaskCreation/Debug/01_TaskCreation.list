
01_TaskCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005494  08005494  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800549c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e2c  20000078  08005514  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ea4  08005514  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001311b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5a  00000000  00000000  000331c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00036b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f25  00000000  00000000  00037958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001108f  00000000  00000000  0005a87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2f53  00000000  00000000  0006b90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e85f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  0013e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005364 	.word	0x08005364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005364 	.word	0x08005364

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbbd 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f845 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ad 	bl	80006d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_Handler, "Task1", 200, "Hello World from Task 1", 2, &task1_handle);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <main+0x80>)
 8000586:	22c8      	movs	r2, #200	; 0xc8
 8000588:	4918      	ldr	r1, [pc, #96]	; (80005ec <main+0x84>)
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <main+0x88>)
 800058c:	f002 f94a 	bl	8002824 <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00a      	beq.n	80005ae <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	e7fe      	b.n	80005ac <main+0x44>

  status = xTaskCreate(task2_Handler, "Task2", 200, "Hello World from Task 2", 2, &task2_handle);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2302      	movs	r3, #2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x8c>)
 80005b8:	22c8      	movs	r2, #200	; 0xc8
 80005ba:	490f      	ldr	r1, [pc, #60]	; (80005f8 <main+0x90>)
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x94>)
 80005be:	f002 f931 	bl	8002824 <xTaskCreate>
 80005c2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d00a      	beq.n	80005e0 <main+0x78>
        __asm volatile
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	60fb      	str	r3, [r7, #12]
    }
 80005dc:	bf00      	nop
 80005de:	e7fe      	b.n	80005de <main+0x76>

  //start the scheduler
  vTaskStartScheduler();
 80005e0:	f002 fa9c 	bl	8002b1c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x7c>
 80005e6:	bf00      	nop
 80005e8:	0800537c 	.word	0x0800537c
 80005ec:	08005394 	.word	0x08005394
 80005f0:	08000991 	.word	0x08000991
 80005f4:	0800539c 	.word	0x0800539c
 80005f8:	080053b4 	.word	0x080053b4
 80005fc:	080009bd 	.word	0x080009bd

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 ff3c 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000674:	2332      	movs	r3, #50	; 0x32
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000678:	2304      	movs	r3, #4
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fe0b 	bl	80012a0 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f9b2 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f86c 	bl	8001790 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f99b 	bl	80009f8 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	4ba2      	ldr	r3, [pc, #648]	; (8000978 <MX_GPIO_Init+0x2a4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4aa1      	ldr	r2, [pc, #644]	; (8000978 <MX_GPIO_Init+0x2a4>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b9f      	ldr	r3, [pc, #636]	; (8000978 <MX_GPIO_Init+0x2a4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	4b9b      	ldr	r3, [pc, #620]	; (8000978 <MX_GPIO_Init+0x2a4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a9a      	ldr	r2, [pc, #616]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b98      	ldr	r3, [pc, #608]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b94      	ldr	r3, [pc, #592]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a93      	ldr	r2, [pc, #588]	; (8000978 <MX_GPIO_Init+0x2a4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b91      	ldr	r3, [pc, #580]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a8c      	ldr	r2, [pc, #560]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b8a      	ldr	r3, [pc, #552]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b86      	ldr	r3, [pc, #536]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a85      	ldr	r2, [pc, #532]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b83      	ldr	r3, [pc, #524]	; (8000978 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a7e      	ldr	r2, [pc, #504]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2108      	movs	r1, #8
 8000796:	4879      	ldr	r0, [pc, #484]	; (800097c <MX_GPIO_Init+0x2a8>)
 8000798:	f000 fd68 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	4877      	ldr	r0, [pc, #476]	; (8000980 <MX_GPIO_Init+0x2ac>)
 80007a2:	f000 fd63 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007a6:	2200      	movs	r2, #0
 80007a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007ac:	4875      	ldr	r0, [pc, #468]	; (8000984 <MX_GPIO_Init+0x2b0>)
 80007ae:	f000 fd5d 	bl	800126c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007b2:	2308      	movs	r3, #8
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	486c      	ldr	r0, [pc, #432]	; (800097c <MX_GPIO_Init+0x2a8>)
 80007ca:	f000 fbb3 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4866      	ldr	r0, [pc, #408]	; (8000980 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fba5 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	485e      	ldr	r0, [pc, #376]	; (8000980 <MX_GPIO_Init+0x2ac>)
 8000806:	f000 fb95 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	485a      	ldr	r0, [pc, #360]	; (8000988 <MX_GPIO_Init+0x2b4>)
 8000820:	f000 fb88 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000824:	2310      	movs	r3, #16
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000834:	2306      	movs	r3, #6
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4852      	ldr	r0, [pc, #328]	; (8000988 <MX_GPIO_Init+0x2b4>)
 8000840:	f000 fb78 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000844:	23e0      	movs	r3, #224	; 0xe0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000854:	2305      	movs	r3, #5
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	484a      	ldr	r0, [pc, #296]	; (8000988 <MX_GPIO_Init+0x2b4>)
 8000860:	f000 fb68 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4845      	ldr	r0, [pc, #276]	; (800098c <MX_GPIO_Init+0x2b8>)
 8000878:	f000 fb5c 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	483c      	ldr	r0, [pc, #240]	; (800098c <MX_GPIO_Init+0x2b8>)
 800089a:	f000 fb4b 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4833      	ldr	r0, [pc, #204]	; (8000984 <MX_GPIO_Init+0x2b0>)
 80008b8:	f000 fb3c 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ce:	2306      	movs	r3, #6
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4829      	ldr	r0, [pc, #164]	; (8000980 <MX_GPIO_Init+0x2ac>)
 80008da:	f000 fb2b 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4825      	ldr	r0, [pc, #148]	; (8000988 <MX_GPIO_Init+0x2b4>)
 80008f4:	f000 fb1e 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090a:	230a      	movs	r3, #10
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	481c      	ldr	r0, [pc, #112]	; (8000988 <MX_GPIO_Init+0x2b4>)
 8000916:	f000 fb0d 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4815      	ldr	r0, [pc, #84]	; (8000984 <MX_GPIO_Init+0x2b0>)
 800092e:	f000 fb01 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000932:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093c:	2301      	movs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000944:	2304      	movs	r3, #4
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	480f      	ldr	r0, [pc, #60]	; (800098c <MX_GPIO_Init+0x2b8>)
 8000950:	f000 faf0 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000954:	2302      	movs	r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000958:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0x2a8>)
 800096a:	f000 fae3 	bl	8000f34 <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3730      	adds	r7, #48	; 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40021000 	.word	0x40021000
 8000980:	40020800 	.word	0x40020800
 8000984:	40020c00 	.word	0x40020c00
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400

08000990 <task1_Handler>:

/* USER CODE BEGIN 4 */

static void task1_Handler(void* parameters)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s \n", (char*)parameters);
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <task1_Handler+0x24>)
 800099c:	f003 fd7e 	bl	800449c <iprintf>
		taskYIELD();
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <task1_Handler+0x28>)
 80009a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	f3bf 8f4f 	dsb	sy
 80009ac:	f3bf 8f6f 	isb	sy
		printf("%s \n", (char*)parameters);
 80009b0:	e7f2      	b.n	8000998 <task1_Handler+0x8>
 80009b2:	bf00      	nop
 80009b4:	080053bc 	.word	0x080053bc
 80009b8:	e000ed04 	.word	0xe000ed04

080009bc <task2_Handler>:
	}
}

static void task2_Handler(void* parameters)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s \n", (char*)parameters);
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	4802      	ldr	r0, [pc, #8]	; (80009d0 <task2_Handler+0x14>)
 80009c8:	f003 fd68 	bl	800449c <iprintf>
 80009cc:	e7fa      	b.n	80009c4 <task2_Handler+0x8>
 80009ce:	bf00      	nop
 80009d0:	080053bc 	.word	0x080053bc

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f9a3 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40001000 	.word	0x40001000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2036      	movs	r0, #54	; 0x36
 8000a6a:	f000 fa39 	bl	8000ee0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a6e:	2036      	movs	r0, #54	; 0x36
 8000a70:	f000 fa52 	bl	8000f18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_InitTick+0xa4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <HAL_InitTick+0xa4>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_InitTick+0xa4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a90:	f107 0210 	add.w	r2, r7, #16
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f860 	bl	8001b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000aa0:	f001 f84a 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <HAL_InitTick+0xa8>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0c9b      	lsrs	r3, r3, #18
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_InitTick+0xac>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <HAL_InitTick+0xb0>)
 8000abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_InitTick+0xac>)
 8000ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_InitTick+0xac>)
 8000ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_InitTick+0xac>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_InitTick+0xac>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_InitTick+0xac>)
 8000ada:	f001 f873 	bl	8001bc4 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d104      	bne.n	8000aee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <HAL_InitTick+0xac>)
 8000ae6:	f001 f8c7 	bl	8001c78 <HAL_TIM_Base_Start_IT>
 8000aea:	4603      	mov	r3, r0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	431bde83 	.word	0x431bde83
 8000b00:	20012e08 	.word	0x20012e08
 8000b04:	40001000 	.word	0x40001000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM6_DAC_IRQHandler+0x10>)
 8000b3a:	f001 f90d 	bl	8001d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20012e08 	.word	0x20012e08

08000b48 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <ITM_SendChar+0x48>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <ITM_SendChar+0x48>)
 8000b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b5c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <ITM_SendChar+0x4c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <ITM_SendChar+0x4c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b6a:	bf00      	nop
 8000b6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f8      	beq.n	8000b6c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000edfc 	.word	0xe000edfc
 8000b94:	e0000e00 	.word	0xe0000e00

08000b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
	}

return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e009      	b.n	8000bf8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffab 	bl	8000b48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf1      	blt.n	8000be4 <_write+0x12>
	}
	return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_close>:

int _close(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c32:	605a      	str	r2, [r3, #4]
	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_isatty>:

int _isatty(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd7 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fbaf 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc4d 	bl	8000568 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cdc:	0800549c 	.word	0x0800549c
  ldr r2, =_sbss
 8000ce0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ce4:	20012ea4 	.word	0x20012ea4

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f8d8 	bl	8000eca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fe9a 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fe70 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20012e50 	.word	0x20012e50

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20012e50 	.word	0x20012e50

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff4c 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef2:	f7ff ff61 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000ef6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff ffb1 	bl	8000e64 <NVIC_EncodePriority>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff54 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e16b      	b.n	8001228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 815a 	bne.w	8001222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80b4 	beq.w	8001222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b60      	ldr	r3, [pc, #384]	; (8001240 <HAL_GPIO_Init+0x30c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a5f      	ldr	r2, [pc, #380]	; (8001240 <HAL_GPIO_Init+0x30c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a5b      	ldr	r2, [pc, #364]	; (8001244 <HAL_GPIO_Init+0x310>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_GPIO_Init+0x314>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d02b      	beq.n	800115a <HAL_GPIO_Init+0x226>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_GPIO_Init+0x318>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x222>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_GPIO_Init+0x31c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x21e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4f      	ldr	r2, [pc, #316]	; (8001254 <HAL_GPIO_Init+0x320>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <HAL_GPIO_Init+0x324>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x216>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4d      	ldr	r2, [pc, #308]	; (800125c <HAL_GPIO_Init+0x328>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x212>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_GPIO_Init+0x32c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_GPIO_Init+0x330>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x20a>
 800113a:	2307      	movs	r3, #7
 800113c:	e00e      	b.n	800115c <HAL_GPIO_Init+0x228>
 800113e:	2308      	movs	r3, #8
 8001140:	e00c      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001142:	2306      	movs	r3, #6
 8001144:	e00a      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x228>
 800114a:	2304      	movs	r3, #4
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x228>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x228>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x310>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_GPIO_Init+0x334>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119e:	4a32      	ldr	r2, [pc, #200]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_GPIO_Init+0x334>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f ae90 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e264      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d075      	beq.n	80013aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	4ba3      	ldr	r3, [pc, #652]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05b      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e23f      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x74>
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a90      	ldr	r2, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a8a      	ldr	r2, [pc, #552]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fcfe 	bl	8000d58 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fcfa 	bl	8000d58 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e204      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xc0>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcea 	bl	8000d58 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fce6 	bl	8000d58 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1f0      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b62      	ldr	r3, [pc, #392]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1c4      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4952      	ldr	r1, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc9f 	bl	8000d58 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc9b 	bl	8000d58 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1a5      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4940      	ldr	r1, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc7e 	bl	8000d58 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fc7a 	bl	8000d58 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e184      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fc5e 	bl	8000d58 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc5a 	bl	8000d58 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e164      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x200>
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fc47 	bl	8000d58 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc43 	bl	8000d58 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e14d      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a0 	beq.w	800163a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d121      	bne.n	800157a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fc09 	bl	8000d58 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e011      	b.n	800156e <HAL_RCC_OscConfig+0x2ce>
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	42470e80 	.word	0x42470e80
 8001558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff fbfc 	bl	8000d58 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e106      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b85      	ldr	r3, [pc, #532]	; (8001784 <HAL_RCC_OscConfig+0x4e4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f0>
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a80      	ldr	r2, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 8001598:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a7a      	ldr	r2, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a77      	ldr	r2, [pc, #476]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 80015b2:	4b75      	ldr	r3, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a74      	ldr	r2, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b72      	ldr	r3, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a71      	ldr	r2, [pc, #452]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fbc1 	bl	8000d58 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fbbd 	bl	8000d58 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0c5      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x33a>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbab 	bl	8000d58 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fba7 	bl	8000d58 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0af      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 809b 	beq.w	800177a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001644:	4b50      	ldr	r3, [pc, #320]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d05c      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d141      	bne.n	80016dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb7b 	bl	8000d58 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb77 	bl	8000d58 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e081      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	019b      	lsls	r3, r3, #6
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb50 	bl	8000d58 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fb4c 	bl	8000d58 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e056      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x41c>
 80016da:	e04e      	b.n	800177a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb39 	bl	8000d58 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fb35 	bl	8000d58 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03f      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x44a>
 8001708:	e037      	b.n	800177a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e032      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d028      	beq.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d121      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d11a      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800174c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174e:	4293      	cmp	r3, r2
 8001750:	d111      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40007000 	.word	0x40007000
 8001788:	40023800 	.word	0x40023800
 800178c:	42470060 	.word	0x42470060

08001790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0cc      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d90c      	bls.n	80017cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d044      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e067      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4934      	ldr	r1, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff fa6a 	bl	8000d58 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff fa66 	bl	8000d58 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e04f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20c      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f88c 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00
 800194c:	40023800 	.word	0x40023800
 8001950:	080053dc 	.word	0x080053dc
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d00d      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001980:	2b08      	cmp	r3, #8
 8001982:	f200 80bd 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x3a>
 800198e:	e0b7      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e0b7      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e0b4      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04d      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	461a      	mov	r2, r3
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	ea02 0800 	and.w	r8, r2, r0
 80019ca:	ea03 0901 	and.w	r9, r3, r1
 80019ce:	4640      	mov	r0, r8
 80019d0:	4649      	mov	r1, r9
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e0:	0142      	lsls	r2, r0, #5
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	ebb0 0008 	subs.w	r0, r0, r8
 80019ea:	eb61 0109 	sbc.w	r1, r1, r9
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	018b      	lsls	r3, r1, #6
 80019f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fc:	0182      	lsls	r2, r0, #6
 80019fe:	1a12      	subs	r2, r2, r0
 8001a00:	eb63 0301 	sbc.w	r3, r3, r1
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	00d9      	lsls	r1, r3, #3
 8001a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a12:	00d0      	lsls	r0, r2, #3
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	eb12 0208 	adds.w	r2, r2, r8
 8001a1c:	eb43 0309 	adc.w	r3, r3, r9
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0259      	lsls	r1, r3, #9
 8001a2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a2e:	0250      	lsls	r0, r2, #9
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f7fe fc16 	bl	8000270 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e04a      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	461a      	mov	r2, r3
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	ea02 0400 	and.w	r4, r2, r0
 8001a66:	ea03 0501 	and.w	r5, r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	014b      	lsls	r3, r1, #5
 8001a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a7c:	0142      	lsls	r2, r0, #5
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	1b00      	subs	r0, r0, r4
 8001a84:	eb61 0105 	sbc.w	r1, r1, r5
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	018b      	lsls	r3, r1, #6
 8001a92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a96:	0182      	lsls	r2, r0, #6
 8001a98:	1a12      	subs	r2, r2, r0
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	00d9      	lsls	r1, r3, #3
 8001aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aac:	00d0      	lsls	r0, r2, #3
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	1912      	adds	r2, r2, r4
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0299      	lsls	r1, r3, #10
 8001ac2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ac6:	0290      	lsls	r0, r2, #10
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	f7fe fbca 	bl	8000270 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	60bb      	str	r3, [r7, #8]
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b02:	60bb      	str	r3, [r7, #8]
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	68bb      	ldr	r3, [r7, #8]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a9b      	lsrs	r3, r3, #10
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	080053ec 	.word	0x080053ec

08001b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_RCC_GetClockConfig+0x60>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0207 	and.w	r2, r3, #7
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e041      	b.n	8001c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f839 	bl	8001c62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f000 f9d8 	bl	8001fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e04e      	b.n	8001d2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d022      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d01d      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d018      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d010      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	e007      	b.n	8001d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40000c00 	.word	0x40000c00
 8001d4c:	40010400 	.word	0x40010400
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40001800 	.word	0x40001800

08001d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0202 	mvn.w	r2, #2
 8001d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ee 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8e0 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8f1 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0204 	mvn.w	r2, #4
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8c4 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8b6 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8c7 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0208 	mvn.w	r2, #8
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f89a 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f88c 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f89d 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0210 	mvn.w	r2, #16
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2208      	movs	r2, #8
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f870 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f862 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f873 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0201 	mvn.w	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fd7c 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f902 	bl	800210c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f838 	bl	8001fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0220 	mvn.w	r2, #32
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8cc 	bl	80020f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <TIM_Base_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <TIM_Base_SetConfig+0x114>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d027      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d023      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d017      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <TIM_Base_SetConfig+0x128>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <TIM_Base_SetConfig+0x12c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <TIM_Base_SetConfig+0x130>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a25      	ldr	r2, [pc, #148]	; (80020ec <TIM_Base_SetConfig+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <TIM_Base_SetConfig+0x138>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <TIM_Base_SetConfig+0x13c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <TIM_Base_SetConfig+0x114>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_Base_SetConfig+0xf8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <TIM_Base_SetConfig+0x124>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d103      	bne.n	80020b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	615a      	str	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40001800 	.word	0x40001800
 80020f0:	40001c00 	.word	0x40001c00
 80020f4:	40002000 	.word	0x40002000

080020f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 0208 	add.w	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0208 	add.w	r2, r3, #8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0208 	add.w	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d103      	bne.n	800219a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e00c      	b.n	80021b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3308      	adds	r3, #8
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e002      	b.n	80021a8 <vListInsert+0x2e>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d2f6      	bcs.n	80021a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6892      	ldr	r2, [r2, #8]
 8002202:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6852      	ldr	r2, [r2, #4]
 800220c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d103      	bne.n	8002220 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1e5a      	subs	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800224a:	2301      	movs	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <xQueueGenericReset+0x2e>
        __asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	60fb      	str	r3, [r7, #12]
    }
 800226a:	bf00      	nop
 800226c:	e7fe      	b.n	800226c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05d      	beq.n	8002330 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	d059      	beq.n	8002330 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	2100      	movs	r1, #0
 8002286:	fba3 2302 	umull	r2, r3, r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d000      	beq.n	8002290 <xQueueGenericReset+0x50>
 800228e:	2101      	movs	r1, #1
 8002290:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d14c      	bne.n	8002330 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002296:	f001 fde7 	bl	8003e68 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	441a      	add	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2200      	movs	r2, #0
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6939      	ldr	r1, [r7, #16]
 80022ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	441a      	add	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	22ff      	movs	r2, #255	; 0xff
 80022da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d114      	bne.n	8002316 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01a      	beq.n	800232a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3310      	adds	r3, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 ff57 	bl	80031ac <xTaskRemoveFromEventList>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d012      	beq.n	800232a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <xQueueGenericReset+0x11c>)
 8002306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	e009      	b.n	800232a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	3310      	adds	r3, #16
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff00 	bl	8002120 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3324      	adds	r3, #36	; 0x24
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fefb 	bl	8002120 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800232a:	f001 fdcd 	bl	8003ec8 <vPortExitCritical>
 800232e:	e001      	b.n	8002334 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <xQueueGenericReset+0x110>
        __asm volatile
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	60bb      	str	r3, [r7, #8]
    }
 800234c:	bf00      	nop
 800234e:	e7fe      	b.n	800234e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02e      	beq.n	80023d6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002378:	2100      	movs	r1, #0
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	fba3 2302 	umull	r2, r3, r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d000      	beq.n	8002388 <xQueueGenericCreate+0x28>
 8002386:	2101      	movs	r1, #1
 8002388:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d123      	bne.n	80023d6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002396:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800239a:	d81c      	bhi.n	80023d6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	3350      	adds	r3, #80	; 0x50
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 fe3e 	bl	800402c <pvPortMalloc>
 80023b0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01c      	beq.n	80023f2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3350      	adds	r3, #80	; 0x50
 80023c0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f814 	bl	80023fc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023d4:	e00d      	b.n	80023f2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericCreate+0x92>
        __asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	613b      	str	r3, [r7, #16]
    }
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023f2:	69fb      	ldr	r3, [r7, #28]
    }
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e002      	b.n	800241e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800242a:	2101      	movs	r1, #1
 800242c:	69b8      	ldr	r0, [r7, #24]
 800242e:	f7ff ff07 	bl	8002240 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <xQueueReceive+0x30>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	623b      	str	r3, [r7, #32]
    }
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <xQueueReceive+0x3e>
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueueReceive+0x42>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueReceive+0x44>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xQueueReceive+0x5e>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	61fb      	str	r3, [r7, #28]
    }
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a2:	f001 f893 	bl	80035cc <xTaskGetSchedulerState>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <xQueueReceive+0x6e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <xQueueReceive+0x72>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueReceive+0x74>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueReceive+0x8e>
        __asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	61bb      	str	r3, [r7, #24]
    }
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024d2:	f001 fcc9 	bl	8003e68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01f      	beq.n	8002522 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024e6:	f000 f88d 	bl	8002604 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	3310      	adds	r3, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fe54 	bl	80031ac <xTaskRemoveFromEventList>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <xQueueReceive+0x1bc>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800251a:	f001 fcd5 	bl	8003ec8 <vPortExitCritical>
                return pdPASS;
 800251e:	2301      	movs	r3, #1
 8002520:	e069      	b.n	80025f6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002528:	f001 fcce 	bl	8003ec8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800252c:	2300      	movs	r3, #0
 800252e:	e062      	b.n	80025f6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f000 ff0c 	bl	8003358 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002544:	f001 fcc0 	bl	8003ec8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002548:	f000 fb3a 	bl	8002bc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800254c:	f001 fc8c 	bl	8003e68 <vPortEnterCritical>
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d103      	bne.n	8002566 <xQueueReceive+0x122>
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d103      	bne.n	800257c <xQueueReceive+0x138>
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	f001 fca4 	bl	8003ec8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002580:	1d3a      	adds	r2, r7, #4
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fefb 	bl	8003384 <xTaskCheckForTimeOut>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d123      	bne.n	80025dc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002596:	f000 f8ad 	bl	80026f4 <prvIsQueueEmpty>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	3324      	adds	r3, #36	; 0x24
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fd95 	bl	80030d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b0:	f000 f84e 	bl	8002650 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025b4:	f000 fb12 	bl	8002bdc <xTaskResumeAll>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d189      	bne.n	80024d2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <xQueueReceive+0x1bc>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	e780      	b.n	80024d2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d2:	f000 f83d 	bl	8002650 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025d6:	f000 fb01 	bl	8002bdc <xTaskResumeAll>
 80025da:	e77a      	b.n	80024d2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025de:	f000 f837 	bl	8002650 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025e2:	f000 fafb 	bl	8002bdc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e8:	f000 f884 	bl	80026f4 <prvIsQueueEmpty>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f43f af6f 	beq.w	80024d2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	441a      	add	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	d303      	bcc.n	8002638 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68d9      	ldr	r1, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	461a      	mov	r2, r3
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	f001 ff14 	bl	8004470 <memcpy>
    }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002658:	f001 fc06 	bl	8003e68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002662:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002664:	e011      	b.n	800268a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3324      	adds	r3, #36	; 0x24
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fd9a 	bl	80031ac <xTaskRemoveFromEventList>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800267e:	f000 fee7 	bl	8003450 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3b01      	subs	r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	dce9      	bgt.n	8002666 <prvUnlockQueue+0x16>
 8002692:	e000      	b.n	8002696 <prvUnlockQueue+0x46>
                        break;
 8002694:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800269e:	f001 fc13 	bl	8003ec8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026a2:	f001 fbe1 	bl	8003e68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ae:	e011      	b.n	80026d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3310      	adds	r3, #16
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fd75 	bl	80031ac <xTaskRemoveFromEventList>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026c8:	f000 fec2 	bl	8003450 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	dce9      	bgt.n	80026b0 <prvUnlockQueue+0x60>
 80026dc:	e000      	b.n	80026e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	22ff      	movs	r2, #255	; 0xff
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026e8:	f001 fbee 	bl	8003ec8 <vPortExitCritical>
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026fc:	f001 fbb4 	bl	8003e68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002708:	2301      	movs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e001      	b.n	8002712 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002712:	f001 fbd9 	bl	8003ec8 <vPortExitCritical>

    return xReturn;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <vQueueAddToRegistry+0x26>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60fb      	str	r3, [r7, #12]
    }
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d024      	beq.n	800279a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e01e      	b.n	8002794 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <vQueueAddToRegistry+0x98>)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d105      	bne.n	8002772 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <vQueueAddToRegistry+0x98>)
 800276c:	4413      	add	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
                    break;
 8002770:	e013      	b.n	800279a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <vQueueAddToRegistry+0x6e>
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <vQueueAddToRegistry+0x98>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <vQueueAddToRegistry+0x98>)
 800278a:	4413      	add	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b07      	cmp	r3, #7
 8002798:	d9dd      	bls.n	8002756 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	20012e54 	.word	0x20012e54

080027bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027cc:	f001 fb4c 	bl	8003e68 <vPortEnterCritical>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d103      	bne.n	80027e6 <vQueueWaitForMessageRestricted+0x2a>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d103      	bne.n	80027fc <vQueueWaitForMessageRestricted+0x40>
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027fc:	f001 fb64 	bl	8003ec8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3324      	adds	r3, #36	; 0x24
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fc85 	bl	8003120 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff1a 	bl	8002650 <prvUnlockQueue>
    }
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002824:	b580      	push	{r7, lr}
 8002826:	b08c      	sub	sp, #48	; 0x30
 8002828:	af04      	add	r7, sp, #16
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fbf7 	bl	800402c <pvPortMalloc>
 800283e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002846:	2058      	movs	r0, #88	; 0x58
 8002848:	f001 fbf0 	bl	800402c <pvPortMalloc>
 800284c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
 800285a:	e005      	b.n	8002868 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f001 fcc5 	bl	80041ec <vPortFree>
 8002862:	e001      	b.n	8002868 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	2300      	movs	r3, #0
 8002872:	9303      	str	r3, [sp, #12]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f80e 	bl	80028a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800288a:	69f8      	ldr	r0, [r7, #28]
 800288c:	f000 f8b0 	bl	80029f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002890:	2301      	movs	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e002      	b.n	800289c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800289c:	69bb      	ldr	r3, [r7, #24]
    }
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b088      	sub	sp, #32
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	461a      	mov	r2, r3
 80028be:	21a5      	movs	r1, #165	; 0xa5
 80028c0:	f001 fde4 	bl	800448c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ce:	3b01      	subs	r3, #1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f023 0307 	bic.w	r3, r3, #7
 80028dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	617b      	str	r3, [r7, #20]
    }
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01f      	beq.n	8002944 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e012      	b.n	8002930 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	7819      	ldrb	r1, [r3, #0]
 8002912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	3334      	adds	r3, #52	; 0x34
 800291a:	460a      	mov	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3301      	adds	r3, #1
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b09      	cmp	r3, #9
 8002934:	d9e9      	bls.n	800290a <prvInitialiseNewTask+0x64>
 8002936:	e000      	b.n	800293a <prvInitialiseNewTask+0x94>
            {
                break;
 8002938:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002942:	e003      	b.n	800294c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2b04      	cmp	r3, #4
 8002950:	d90a      	bls.n	8002968 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	613b      	str	r3, [r7, #16]
    }
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	2b04      	cmp	r3, #4
 800296c:	d901      	bls.n	8002972 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800296e:	2304      	movs	r3, #4
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	2200      	movs	r2, #0
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	3304      	adds	r3, #4
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fbe9 	bl	8002160 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	3318      	adds	r3, #24
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fbe4 	bl	8002160 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	f1c3 0205 	rsb	r2, r3, #5
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	3350      	adds	r3, #80	; 0x50
 80029b2:	2204      	movs	r2, #4
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fd68 	bl	800448c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	3354      	adds	r3, #84	; 0x54
 80029c0:	2201      	movs	r2, #1
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 fd61 	bl	800448c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	69b8      	ldr	r0, [r7, #24]
 80029d0:	f001 f91e 	bl	8003c10 <pxPortInitialiseStack>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029e6:	bf00      	nop
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029f8:	f001 fa36 	bl	8003e68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <prvAddNewTaskToReadyList+0x110>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a3f      	ldr	r2, [pc, #252]	; (8002b00 <prvAddNewTaskToReadyList+0x110>)
 8002a04:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <prvAddNewTaskToReadyList+0x114>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a0e:	4a3d      	ldr	r2, [pc, #244]	; (8002b04 <prvAddNewTaskToReadyList+0x114>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a14:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <prvAddNewTaskToReadyList+0x110>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d110      	bne.n	8002a3e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a1c:	f000 fd3c 	bl	8003498 <prvInitialiseTaskLists>
 8002a20:	e00d      	b.n	8002a3e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <prvAddNewTaskToReadyList+0x118>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <prvAddNewTaskToReadyList+0x114>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d802      	bhi.n	8002a3e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a38:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <prvAddNewTaskToReadyList+0x114>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a3e:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <prvAddNewTaskToReadyList+0x11c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <prvAddNewTaskToReadyList+0x11c>)
 8002a46:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <prvAddNewTaskToReadyList+0x11c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <prvAddNewTaskToReadyList+0x120>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	4a2c      	ldr	r2, [pc, #176]	; (8002b10 <prvAddNewTaskToReadyList+0x120>)
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	492b      	ldr	r1, [pc, #172]	; (8002b14 <prvAddNewTaskToReadyList+0x124>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3304      	adds	r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	3204      	adds	r2, #4
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1d1a      	adds	r2, r3, #4
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <prvAddNewTaskToReadyList+0x124>)
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	615a      	str	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	4918      	ldr	r1, [pc, #96]	; (8002b14 <prvAddNewTaskToReadyList+0x124>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1c59      	adds	r1, r3, #1
 8002ac0:	4814      	ldr	r0, [pc, #80]	; (8002b14 <prvAddNewTaskToReadyList+0x124>)
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4403      	add	r3, r0
 8002acc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ace:	f001 f9fb 	bl	8003ec8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <prvAddNewTaskToReadyList+0x118>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00e      	beq.n	8002af8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <prvAddNewTaskToReadyList+0x114>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <prvAddNewTaskToReadyList+0x128>)
 8002aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000016c 	.word	0x2000016c
 8002b04:	20000094 	.word	0x20000094
 8002b08:	20000178 	.word	0x20000178
 8002b0c:	20000188 	.word	0x20000188
 8002b10:	20000174 	.word	0x20000174
 8002b14:	20000098 	.word	0x20000098
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <vTaskStartScheduler+0x88>)
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2282      	movs	r2, #130	; 0x82
 8002b2e:	491e      	ldr	r1, [pc, #120]	; (8002ba8 <vTaskStartScheduler+0x8c>)
 8002b30:	481e      	ldr	r0, [pc, #120]	; (8002bac <vTaskStartScheduler+0x90>)
 8002b32:	f7ff fe77 	bl	8002824 <xTaskCreate>
 8002b36:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002b3e:	f000 fde3 	bl	8003708 <xTimerCreateTimerTask>
 8002b42:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d116      	bne.n	8002b78 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	60bb      	str	r3, [r7, #8]
    }
 8002b5c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <vTaskStartScheduler+0x94>)
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <vTaskStartScheduler+0x98>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <vTaskStartScheduler+0x9c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b72:	f001 f8d7 	bl	8003d24 <xPortStartScheduler>
 8002b76:	e00e      	b.n	8002b96 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d10a      	bne.n	8002b96 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	607b      	str	r3, [r7, #4]
    }
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <vTaskStartScheduler+0xa0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000190 	.word	0x20000190
 8002ba8:	080053c4 	.word	0x080053c4
 8002bac:	08003469 	.word	0x08003469
 8002bb0:	2000018c 	.word	0x2000018c
 8002bb4:	20000178 	.word	0x20000178
 8002bb8:	20000170 	.word	0x20000170
 8002bbc:	2000000c 	.word	0x2000000c

08002bc0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <vTaskSuspendAll+0x18>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <vTaskSuspendAll+0x18>)
 8002bcc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	20000194 	.word	0x20000194

08002bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002bea:	4b71      	ldr	r3, [pc, #452]	; (8002db0 <xTaskResumeAll+0x1d4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <xTaskResumeAll+0x2c>
        __asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	607b      	str	r3, [r7, #4]
    }
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c08:	f001 f92e 	bl	8003e68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c0c:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <xTaskResumeAll+0x1d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	4a67      	ldr	r2, [pc, #412]	; (8002db0 <xTaskResumeAll+0x1d4>)
 8002c14:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c16:	4b66      	ldr	r3, [pc, #408]	; (8002db0 <xTaskResumeAll+0x1d4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80c0 	bne.w	8002da0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <xTaskResumeAll+0x1d8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80bb 	beq.w	8002da0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2a:	e08a      	b.n	8002d42 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c2c:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <xTaskResumeAll+0x1dc>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	6a12      	ldr	r2, [r2, #32]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	69d2      	ldr	r2, [r2, #28]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3318      	adds	r3, #24
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d103      	bne.n	8002c62 <xTaskResumeAll+0x86>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	6a1a      	ldr	r2, [r3, #32]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1e5a      	subs	r2, r3, #1
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	68d2      	ldr	r2, [r2, #12]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	6892      	ldr	r2, [r2, #8]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3304      	adds	r3, #4
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d103      	bne.n	8002ca0 <xTaskResumeAll+0xc4>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <xTaskResumeAll+0x1e0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	4a3f      	ldr	r2, [pc, #252]	; (8002dbc <xTaskResumeAll+0x1e0>)
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	493e      	ldr	r1, [pc, #248]	; (8002dc0 <xTaskResumeAll+0x1e4>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	3204      	adds	r2, #4
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	1d1a      	adds	r2, r3, #4
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <xTaskResumeAll+0x1e4>)
 8002d06:	441a      	add	r2, r3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	615a      	str	r2, [r3, #20]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	492b      	ldr	r1, [pc, #172]	; (8002dc0 <xTaskResumeAll+0x1e4>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	4827      	ldr	r0, [pc, #156]	; (8002dc0 <xTaskResumeAll+0x1e4>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4403      	add	r3, r0
 8002d2c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <xTaskResumeAll+0x1e8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002d3c:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <xTaskResumeAll+0x1ec>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <xTaskResumeAll+0x1dc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f47f af70 	bne.w	8002c2c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d52:	f000 fc1f 	bl	8003594 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <xTaskResumeAll+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d010      	beq.n	8002d84 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d62:	f000 f847 	bl	8002df4 <xTaskIncrementTick>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002d6c:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <xTaskResumeAll+0x1ec>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f1      	bne.n	8002d62 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <xTaskResumeAll+0x1f0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <xTaskResumeAll+0x1ec>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <xTaskResumeAll+0x1f4>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002da0:	f001 f892 	bl	8003ec8 <vPortExitCritical>

    return xAlreadyYielded;
 8002da4:	69bb      	ldr	r3, [r7, #24]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000194 	.word	0x20000194
 8002db4:	2000016c 	.word	0x2000016c
 8002db8:	2000012c 	.word	0x2000012c
 8002dbc:	20000174 	.word	0x20000174
 8002dc0:	20000098 	.word	0x20000098
 8002dc4:	20000094 	.word	0x20000094
 8002dc8:	20000180 	.word	0x20000180
 8002dcc:	2000017c 	.word	0x2000017c
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <xTaskGetTickCount+0x1c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002de0:	687b      	ldr	r3, [r7, #4]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000170 	.word	0x20000170

08002df4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <xTaskIncrementTick+0x200>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 80ec 	bne.w	8002fe0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e08:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <xTaskIncrementTick+0x204>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e10:	4a79      	ldr	r2, [pc, #484]	; (8002ff8 <xTaskIncrementTick+0x204>)
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d120      	bne.n	8002e5e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e1c:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <xTaskIncrementTick+0x208>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <xTaskIncrementTick+0x48>
        __asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	607b      	str	r3, [r7, #4]
    }
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <xTaskIncrementTick+0x46>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <xTaskIncrementTick+0x208>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	4b6f      	ldr	r3, [pc, #444]	; (8003000 <xTaskIncrementTick+0x20c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6d      	ldr	r2, [pc, #436]	; (8002ffc <xTaskIncrementTick+0x208>)
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <xTaskIncrementTick+0x20c>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <xTaskIncrementTick+0x210>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a6b      	ldr	r2, [pc, #428]	; (8003004 <xTaskIncrementTick+0x210>)
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	f000 fb9b 	bl	8003594 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e5e:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <xTaskIncrementTick+0x214>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f0c0 80a6 	bcc.w	8002fb6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e6a:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <xTaskIncrementTick+0x208>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <xTaskIncrementTick+0x214>)
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	601a      	str	r2, [r3, #0]
                    break;
 8002e7c:	e09b      	b.n	8002fb6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <xTaskIncrementTick+0x208>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d203      	bcs.n	8002e9e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e96:	4a5c      	ldr	r2, [pc, #368]	; (8003008 <xTaskIncrementTick+0x214>)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e9c:	e08b      	b.n	8002fb6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	68d2      	ldr	r2, [r2, #12]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	6892      	ldr	r2, [r2, #8]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d103      	bne.n	8002ecc <xTaskIncrementTick+0xd8>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	615a      	str	r2, [r3, #20]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1e5a      	subs	r2, r3, #1
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01e      	beq.n	8002f22 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	6a12      	ldr	r2, [r2, #32]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	69d2      	ldr	r2, [r2, #28]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	3318      	adds	r3, #24
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d103      	bne.n	8002f12 <xTaskIncrementTick+0x11e>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2200      	movs	r2, #0
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1e5a      	subs	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	2201      	movs	r2, #1
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <xTaskIncrementTick+0x218>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	4a36      	ldr	r2, [pc, #216]	; (800300c <xTaskIncrementTick+0x218>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	4935      	ldr	r1, [pc, #212]	; (8003010 <xTaskIncrementTick+0x21c>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3304      	adds	r3, #4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	3204      	adds	r2, #4
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4a26      	ldr	r2, [pc, #152]	; (8003010 <xTaskIncrementTick+0x21c>)
 8002f78:	441a      	add	r2, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4923      	ldr	r1, [pc, #140]	; (8003010 <xTaskIncrementTick+0x21c>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1c59      	adds	r1, r3, #1
 8002f92:	481f      	ldr	r0, [pc, #124]	; (8003010 <xTaskIncrementTick+0x21c>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <xTaskIncrementTick+0x220>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	429a      	cmp	r2, r3
 8002fac:	f4ff af5d 	bcc.w	8002e6a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb4:	e759      	b.n	8002e6a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <xTaskIncrementTick+0x220>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	4914      	ldr	r1, [pc, #80]	; (8003010 <xTaskIncrementTick+0x21c>)
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d901      	bls.n	8002fd2 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <xTaskIncrementTick+0x224>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	e004      	b.n	8002fea <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <xTaskIncrementTick+0x228>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	4a0d      	ldr	r2, [pc, #52]	; (800301c <xTaskIncrementTick+0x228>)
 8002fe8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000194 	.word	0x20000194
 8002ff8:	20000170 	.word	0x20000170
 8002ffc:	20000124 	.word	0x20000124
 8003000:	20000128 	.word	0x20000128
 8003004:	20000184 	.word	0x20000184
 8003008:	2000018c 	.word	0x2000018c
 800300c:	20000174 	.word	0x20000174
 8003010:	20000098 	.word	0x20000098
 8003014:	20000094 	.word	0x20000094
 8003018:	20000180 	.word	0x20000180
 800301c:	2000017c 	.word	0x2000017c

08003020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <vTaskSwitchContext+0xa4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <vTaskSwitchContext+0xa8>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003034:	e03f      	b.n	80030b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <vTaskSwitchContext+0xa8>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <vTaskSwitchContext+0xac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800304a:	7afb      	ldrb	r3, [r7, #11]
 800304c:	f1c3 031f 	rsb	r3, r3, #31
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	491f      	ldr	r1, [pc, #124]	; (80030d0 <vTaskSwitchContext+0xb0>)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	607b      	str	r3, [r7, #4]
    }
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <vTaskSwitchContext+0x5a>
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <vTaskSwitchContext+0xb0>)
 8003088:	4413      	add	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3308      	adds	r3, #8
 800309e:	429a      	cmp	r2, r3
 80030a0:	d104      	bne.n	80030ac <vTaskSwitchContext+0x8c>
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <vTaskSwitchContext+0xb4>)
 80030b4:	6013      	str	r3, [r2, #0]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000194 	.word	0x20000194
 80030c8:	20000180 	.word	0x20000180
 80030cc:	20000174 	.word	0x20000174
 80030d0:	20000098 	.word	0x20000098
 80030d4:	20000094 	.word	0x20000094

080030d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	60fb      	str	r3, [r7, #12]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <vTaskPlaceOnEventList+0x44>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3318      	adds	r3, #24
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff f837 	bl	800217a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800310c:	2101      	movs	r1, #1
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f000 fa7a 	bl	8003608 <prvAddCurrentTaskToDelayedList>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000094 	.word	0x20000094

08003120 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	613b      	str	r3, [r7, #16]
    }
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	61da      	str	r2, [r3, #28]
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	6892      	ldr	r2, [r2, #8]
 800315e:	621a      	str	r2, [r3, #32]
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	3218      	adds	r2, #24
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f103 0218 	add.w	r2, r3, #24
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	68b8      	ldr	r0, [r7, #8]
 800319a:	f000 fa35 	bl	8003608 <prvAddCurrentTaskToDelayedList>
    }
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000094 	.word	0x20000094

080031ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031ac:	b480      	push	{r7}
 80031ae:	b08b      	sub	sp, #44	; 0x2c
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60fb      	str	r3, [r7, #12]
    }
 80031d4:	bf00      	nop
 80031d6:	e7fe      	b.n	80031d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	6a3a      	ldr	r2, [r7, #32]
 80031e4:	6a12      	ldr	r2, [r2, #32]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	69d2      	ldr	r2, [r2, #28]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	3318      	adds	r3, #24
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <xTaskRemoveFromEventList+0x5a>
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	6a1a      	ldr	r2, [r3, #32]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2200      	movs	r2, #0
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003216:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <xTaskRemoveFromEventList+0x194>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d15e      	bne.n	80032dc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	68d2      	ldr	r2, [r2, #12]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	3304      	adds	r3, #4
 8003240:	429a      	cmp	r2, r3
 8003242:	d103      	bne.n	800324c <xTaskRemoveFromEventList+0xa0>
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	4b37      	ldr	r3, [pc, #220]	; (8003344 <xTaskRemoveFromEventList+0x198>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	4a36      	ldr	r2, [pc, #216]	; (8003344 <xTaskRemoveFromEventList+0x198>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	4935      	ldr	r1, [pc, #212]	; (8003348 <xTaskRemoveFromEventList+0x19c>)
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3304      	adds	r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	3204      	adds	r2, #4
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	1d1a      	adds	r2, r3, #4
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4a25      	ldr	r2, [pc, #148]	; (8003348 <xTaskRemoveFromEventList+0x19c>)
 80032b2:	441a      	add	r2, r3
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	615a      	str	r2, [r3, #20]
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	4922      	ldr	r1, [pc, #136]	; (8003348 <xTaskRemoveFromEventList+0x19c>)
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	481e      	ldr	r0, [pc, #120]	; (8003348 <xTaskRemoveFromEventList+0x19c>)
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4403      	add	r3, r0
 80032d8:	6019      	str	r1, [r3, #0]
 80032da:	e01b      	b.n	8003314 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <xTaskRemoveFromEventList+0x1a0>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	61da      	str	r2, [r3, #28]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	621a      	str	r2, [r3, #32]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	3218      	adds	r2, #24
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f103 0218 	add.w	r2, r3, #24
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <xTaskRemoveFromEventList+0x1a0>)
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <xTaskRemoveFromEventList+0x1a0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a0e      	ldr	r2, [pc, #56]	; (800334c <xTaskRemoveFromEventList+0x1a0>)
 8003312:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <xTaskRemoveFromEventList+0x1a4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	429a      	cmp	r2, r3
 8003320:	d905      	bls.n	800332e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003322:	2301      	movs	r3, #1
 8003324:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <xTaskRemoveFromEventList+0x1a8>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e001      	b.n	8003332 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003334:	4618      	mov	r0, r3
 8003336:	372c      	adds	r7, #44	; 0x2c
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20000194 	.word	0x20000194
 8003344:	20000174 	.word	0x20000174
 8003348:	20000098 	.word	0x20000098
 800334c:	2000012c 	.word	0x2000012c
 8003350:	20000094 	.word	0x20000094
 8003354:	20000180 	.word	0x20000180

08003358 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <vTaskInternalSetTimeOutState+0x24>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <vTaskInternalSetTimeOutState+0x28>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	605a      	str	r2, [r3, #4]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000184 	.word	0x20000184
 8003380:	20000170 	.word	0x20000170

08003384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	613b      	str	r3, [r7, #16]
    }
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60fb      	str	r3, [r7, #12]
    }
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80033c6:	f000 fd4f 	bl	8003e68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <xTaskCheckForTimeOut+0xc4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d102      	bne.n	80033ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e026      	b.n	8003438 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <xTaskCheckForTimeOut+0xc8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d00a      	beq.n	800340c <xTaskCheckForTimeOut+0x88>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d305      	bcc.n	800340c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e015      	b.n	8003438 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20b      	bcs.n	800342e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad2      	subs	r2, r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff98 	bl	8003358 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e004      	b.n	8003438 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003434:	2301      	movs	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003438:	f000 fd46 	bl	8003ec8 <vPortExitCritical>

    return xReturn;
 800343c:	69fb      	ldr	r3, [r7, #28]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000170 	.word	0x20000170
 800344c:	20000184 	.word	0x20000184

08003450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <vTaskMissedYield+0x14>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000180 	.word	0x20000180

08003468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003470:	f000 f852 	bl	8003518 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <prvIdleTask+0x28>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d9f9      	bls.n	8003470 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <prvIdleTask+0x2c>)
 800347e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800348c:	e7f0      	b.n	8003470 <prvIdleTask+0x8>
 800348e:	bf00      	nop
 8003490:	20000098 	.word	0x20000098
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e00c      	b.n	80034be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <prvInitialiseTaskLists+0x60>)
 80034b0:	4413      	add	r3, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fe34 	bl	8002120 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3301      	adds	r3, #1
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d9ef      	bls.n	80034a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80034c4:	480d      	ldr	r0, [pc, #52]	; (80034fc <prvInitialiseTaskLists+0x64>)
 80034c6:	f7fe fe2b 	bl	8002120 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80034ca:	480d      	ldr	r0, [pc, #52]	; (8003500 <prvInitialiseTaskLists+0x68>)
 80034cc:	f7fe fe28 	bl	8002120 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80034d0:	480c      	ldr	r0, [pc, #48]	; (8003504 <prvInitialiseTaskLists+0x6c>)
 80034d2:	f7fe fe25 	bl	8002120 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <prvInitialiseTaskLists+0x70>)
 80034d8:	f7fe fe22 	bl	8002120 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80034dc:	480b      	ldr	r0, [pc, #44]	; (800350c <prvInitialiseTaskLists+0x74>)
 80034de:	f7fe fe1f 	bl	8002120 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <prvInitialiseTaskLists+0x78>)
 80034e4:	4a05      	ldr	r2, [pc, #20]	; (80034fc <prvInitialiseTaskLists+0x64>)
 80034e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <prvInitialiseTaskLists+0x7c>)
 80034ea:	4a05      	ldr	r2, [pc, #20]	; (8003500 <prvInitialiseTaskLists+0x68>)
 80034ec:	601a      	str	r2, [r3, #0]
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000098 	.word	0x20000098
 80034fc:	200000fc 	.word	0x200000fc
 8003500:	20000110 	.word	0x20000110
 8003504:	2000012c 	.word	0x2000012c
 8003508:	20000140 	.word	0x20000140
 800350c:	20000158 	.word	0x20000158
 8003510:	20000124 	.word	0x20000124
 8003514:	20000128 	.word	0x20000128

08003518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800351e:	e019      	b.n	8003554 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003520:	f000 fca2 	bl	8003e68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <prvCheckTasksWaitingTermination+0x50>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fe5b 	bl	80021ec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <prvCheckTasksWaitingTermination+0x54>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3b01      	subs	r3, #1
 800353c:	4a0b      	ldr	r2, [pc, #44]	; (800356c <prvCheckTasksWaitingTermination+0x54>)
 800353e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <prvCheckTasksWaitingTermination+0x58>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3b01      	subs	r3, #1
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <prvCheckTasksWaitingTermination+0x58>)
 8003548:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800354a:	f000 fcbd 	bl	8003ec8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f810 	bl	8003574 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <prvCheckTasksWaitingTermination+0x58>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e1      	bne.n	8003520 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000140 	.word	0x20000140
 800356c:	2000016c 	.word	0x2000016c
 8003570:	20000154 	.word	0x20000154

08003574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fe33 	bl	80041ec <vPortFree>
                vPortFree( pxTCB );
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fe30 	bl	80041ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <prvResetNextTaskUnblockTime+0x30>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <prvResetNextTaskUnblockTime+0x34>)
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80035aa:	e005      	b.n	80035b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <prvResetNextTaskUnblockTime+0x30>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <prvResetNextTaskUnblockTime+0x34>)
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000124 	.word	0x20000124
 80035c8:	2000018c 	.word	0x2000018c

080035cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <xTaskGetSchedulerState+0x34>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80035da:	2301      	movs	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	e008      	b.n	80035f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <xTaskGetSchedulerState+0x38>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80035e8:	2302      	movs	r3, #2
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	e001      	b.n	80035f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80035f2:	687b      	ldr	r3, [r7, #4]
    }
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000178 	.word	0x20000178
 8003604:	20000194 	.word	0x20000194

08003608 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <prvAddCurrentTaskToDelayedList+0xe4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fde4 	bl	80021ec <uxListRemove>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2201      	movs	r2, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4013      	ands	r3, r2
 800363e:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003640:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d124      	bne.n	8003694 <prvAddCurrentTaskToDelayedList+0x8c>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d021      	beq.n	8003694 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	3204      	adds	r2, #4
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003684:	615a      	str	r2, [r3, #20]
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003692:	e026      	b.n	80036e2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d209      	bcs.n	80036c0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f7fe fd5e 	bl	800217a <vListInsert>
}
 80036be:	e010      	b.n	80036e2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <prvAddCurrentTaskToDelayedList+0xf8>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7fe fd54 	bl	800217a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d202      	bcs.n	80036e2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80036dc:	4a09      	ldr	r2, [pc, #36]	; (8003704 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000170 	.word	0x20000170
 80036f0:	20000094 	.word	0x20000094
 80036f4:	20000174 	.word	0x20000174
 80036f8:	20000158 	.word	0x20000158
 80036fc:	20000128 	.word	0x20000128
 8003700:	20000124 	.word	0x20000124
 8003704:	2000018c 	.word	0x2000018c

08003708 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003712:	f000 fa47 	bl	8003ba4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <xTimerCreateTimerTask+0x54>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <xTimerCreateTimerTask+0x58>)
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2302      	movs	r3, #2
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800372c:	490d      	ldr	r1, [pc, #52]	; (8003764 <xTimerCreateTimerTask+0x5c>)
 800372e:	480e      	ldr	r0, [pc, #56]	; (8003768 <xTimerCreateTimerTask+0x60>)
 8003730:	f7ff f878 	bl	8002824 <xTaskCreate>
 8003734:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	603b      	str	r3, [r7, #0]
    }
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003752:	687b      	ldr	r3, [r7, #4]
    }
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200001c8 	.word	0x200001c8
 8003760:	200001cc 	.word	0x200001cc
 8003764:	080053cc 	.word	0x080053cc
 8003768:	08003811 	.word	0x08003811

0800376c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003778:	e008      	b.n	800378c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	18d1      	adds	r1, r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f8dd 	bl	8003958 <prvInsertTimerInActiveList>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ea      	bne.n	800377a <prvReloadTimer+0xe>
        }
    }
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <prvProcessExpiredTimer+0x5c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fd0f 	bl	80021ec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff ffc3 	bl	800376c <prvReloadTimer>
 80037e6:	e008      	b.n	80037fa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	4798      	blx	r3
    }
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200001c0 	.word	0x200001c0

08003810 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003818:	f107 0308 	add.w	r3, r7, #8
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f857 	bl	80038d0 <prvGetNextExpireTime>
 8003822:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4619      	mov	r1, r3
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f803 	bl	8003834 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800382e:	f000 f8d5 	bl	80039dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003832:	e7f1      	b.n	8003818 <prvTimerTask+0x8>

08003834 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800383e:	f7ff f9bf 	bl	8002bc0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003842:	f107 0308 	add.w	r3, r7, #8
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f866 	bl	8003918 <prvSampleTimeNow>
 800384c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d130      	bne.n	80038b6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <prvProcessTimerOrBlockTask+0x3c>
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	429a      	cmp	r2, r3
 8003860:	d806      	bhi.n	8003870 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003862:	f7ff f9bb 	bl	8002bdc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffa1 	bl	80037b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800386e:	e024      	b.n	80038ba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <prvProcessTimerOrBlockTask+0x90>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <prvProcessTimerOrBlockTask+0x50>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <prvProcessTimerOrBlockTask+0x52>
 8003884:	2300      	movs	r3, #0
 8003886:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <prvProcessTimerOrBlockTask+0x94>)
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	f7fe ff91 	bl	80027bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800389a:	f7ff f99f 	bl	8002bdc <xTaskResumeAll>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <prvProcessTimerOrBlockTask+0x98>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
    }
 80038b4:	e001      	b.n	80038ba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80038b6:	f7ff f991 	bl	8002bdc <xTaskResumeAll>
    }
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200001c4 	.word	0x200001c4
 80038c8:	200001c8 	.word	0x200001c8
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <prvGetNextExpireTime+0x44>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <prvGetNextExpireTime+0x16>
 80038e2:	2201      	movs	r2, #1
 80038e4:	e000      	b.n	80038e8 <prvGetNextExpireTime+0x18>
 80038e6:	2200      	movs	r2, #0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <prvGetNextExpireTime+0x44>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e001      	b.n	8003904 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003904:	68fb      	ldr	r3, [r7, #12]
    }
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200001c0 	.word	0x200001c0

08003918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003920:	f7ff fa58 	bl	8002dd4 <xTaskGetTickCount>
 8003924:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <prvSampleTimeNow+0x3c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d205      	bcs.n	800393c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003930:	f000 f912 	bl	8003b58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e002      	b.n	8003942 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <prvSampleTimeNow+0x3c>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003948:	68fb      	ldr	r3, [r7, #12]
    }
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200001d0 	.word	0x200001d0

08003958 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d812      	bhi.n	80039a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	429a      	cmp	r2, r3
 800398a:	d302      	bcc.n	8003992 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e01b      	b.n	80039ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <prvInsertTimerInActiveList+0x7c>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe fbec 	bl	800217a <vListInsert>
 80039a2:	e012      	b.n	80039ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d206      	bcs.n	80039ba <prvInsertTimerInActiveList+0x62>
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e007      	b.n	80039ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <prvInsertTimerInActiveList+0x80>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe fbd8 	bl	800217a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80039ca:	697b      	ldr	r3, [r7, #20]
    }
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200001c4 	.word	0x200001c4
 80039d8:	200001c0 	.word	0x200001c0

080039dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039e2:	e0a6      	b.n	8003b32 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f2c0 80a2 	blt.w	8003b30 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fbf5 	bl	80021ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff87 	bl	8003918 <prvSampleTimeNow>
 8003a0a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	f200 808e 	bhi.w	8003b32 <prvProcessReceivedCommands+0x156>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <prvProcessReceivedCommands+0x40>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a41 	.word	0x08003a41
 8003a24:	08003aa9 	.word	0x08003aa9
 8003a28:	08003abd 	.word	0x08003abd
 8003a2c:	08003b07 	.word	0x08003b07
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a41 	.word	0x08003a41
 8003a38:	08003aa9 	.word	0x08003aa9
 8003a3c:	08003abd 	.word	0x08003abd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	18d1      	adds	r1, r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	69f8      	ldr	r0, [r7, #28]
 8003a60:	f7ff ff7a 	bl	8003958 <prvInsertTimerInActiveList>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4619      	mov	r1, r3
 8003a84:	69f8      	ldr	r0, [r7, #28]
 8003a86:	f7ff fe71 	bl	800376c <prvReloadTimer>
 8003a8a:	e008      	b.n	8003a9e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	69f8      	ldr	r0, [r7, #28]
 8003aa4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003aa6:	e044      	b.n	8003b32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003aba:	e03a      	b.n	8003b32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	617b      	str	r3, [r7, #20]
    }
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	18d1      	adds	r1, r2, r3
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	69f8      	ldr	r0, [r7, #28]
 8003b00:	f7ff ff2a 	bl	8003958 <prvInsertTimerInActiveList>
                        break;
 8003b04:	e015      	b.n	8003b32 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003b14:	69f8      	ldr	r0, [r7, #28]
 8003b16:	f000 fb69 	bl	80041ec <vPortFree>
 8003b1a:	e00a      	b.n	8003b32 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b2e:	e000      	b.n	8003b32 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003b30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <prvProcessReceivedCommands+0x178>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f107 0108 	add.w	r1, r7, #8
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fc81 	bl	8002444 <xQueueReceive>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f af4d 	bne.w	80039e4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	200001c8 	.word	0x200001c8

08003b58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b5e:	e009      	b.n	8003b74 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7ff fe1e 	bl	80037b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <prvSwitchTimerLists+0x48>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <prvSwitchTimerLists+0x44>)
 8003b8a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <prvSwitchTimerLists+0x48>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
    }
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200001c0 	.word	0x200001c0
 8003ba0:	200001c4 	.word	0x200001c4

08003ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ba8:	f000 f95e 	bl	8003e68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003bb4:	4811      	ldr	r0, [pc, #68]	; (8003bfc <prvCheckForValidListAndQueue+0x58>)
 8003bb6:	f7fe fab3 	bl	8002120 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <prvCheckForValidListAndQueue+0x5c>)
 8003bbc:	f7fe fab0 	bl	8002120 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <prvCheckForValidListAndQueue+0x60>)
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <prvCheckForValidListAndQueue+0x58>)
 8003bc4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <prvCheckForValidListAndQueue+0x64>)
 8003bc8:	4a0d      	ldr	r2, [pc, #52]	; (8003c00 <prvCheckForValidListAndQueue+0x5c>)
 8003bca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003bcc:	2200      	movs	r2, #0
 8003bce:	210c      	movs	r1, #12
 8003bd0:	200a      	movs	r0, #10
 8003bd2:	f7fe fbc5 	bl	8002360 <xQueueGenericCreate>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003bda:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <prvCheckForValidListAndQueue+0x54>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4908      	ldr	r1, [pc, #32]	; (8003c0c <prvCheckForValidListAndQueue+0x68>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fd98 	bl	8002720 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bf0:	f000 f96a 	bl	8003ec8 <vPortExitCritical>
    }
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200001c8 	.word	0x200001c8
 8003bfc:	20000198 	.word	0x20000198
 8003c00:	200001ac 	.word	0x200001ac
 8003c04:	200001c0 	.word	0x200001c0
 8003c08:	200001c4 	.word	0x200001c4
 8003c0c:	080053d4 	.word	0x080053d4

08003c10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b04      	subs	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3b04      	subs	r3, #4
 8003c3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <pxPortInitialiseStack+0x64>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3b14      	subs	r3, #20
 8003c4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b04      	subs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f06f 0202 	mvn.w	r2, #2
 8003c5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b20      	subs	r3, #32
 8003c64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	08003c79 	.word	0x08003c79

08003c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <prvTaskExitError+0x54>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d00a      	beq.n	8003ca2 <prvTaskExitError+0x2a>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
    }
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <prvTaskExitError+0x28>
        __asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	60bb      	str	r3, [r7, #8]
    }
 8003cb4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003cb6:	bf00      	nop
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0fc      	beq.n	8003cb8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <pxCurrentTCBConst2>)
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6808      	ldr	r0, [r1, #0]
 8003cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	f380 8809 	msr	PSP, r0
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8811 	msr	BASEPRI, r0
 8003cea:	4770      	bx	lr
 8003cec:	f3af 8000 	nop.w

08003cf0 <pxCurrentTCBConst2>:
 8003cf0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <prvPortStartFirstTask+0x24>)
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f380 8808 	msr	MSP, r0
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f380 8814 	msr	CONTROL, r0
 8003d0a:	b662      	cpsie	i
 8003d0c:	b661      	cpsie	f
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	df00      	svc	0
 8003d18:	bf00      	nop
 8003d1a:	0000      	.short	0x0000
 8003d1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop

08003d24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d2a:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <xPortStartScheduler+0x120>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <xPortStartScheduler+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10a      	bne.n	8003d4a <xPortStartScheduler+0x26>
        __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	613b      	str	r3, [r7, #16]
    }
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <xPortStartScheduler+0x120>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <xPortStartScheduler+0x128>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10a      	bne.n	8003d6a <xPortStartScheduler+0x46>
        __asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
    }
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <xPortStartScheduler+0x12c>)
 8003d6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <xPortStartScheduler+0x130>)
 8003d90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <xPortStartScheduler+0x134>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d98:	e009      	b.n	8003dae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <xPortStartScheduler+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <xPortStartScheduler+0x134>)
 8003da2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d0ef      	beq.n	8003d9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <xPortStartScheduler+0x134>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00a      	beq.n	8003ddc <xPortStartScheduler+0xb8>
        __asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60bb      	str	r3, [r7, #8]
    }
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <xPortStartScheduler+0x134>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <xPortStartScheduler+0x134>)
 8003de4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <xPortStartScheduler+0x134>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <xPortStartScheduler+0x134>)
 8003df0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <xPortStartScheduler+0x138>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <xPortStartScheduler+0x138>)
 8003e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <xPortStartScheduler+0x138>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <xPortStartScheduler+0x138>)
 8003e0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e12:	f000 f8db 	bl	8003fcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <xPortStartScheduler+0x13c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e1c:	f000 f8fa 	bl	8004014 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <xPortStartScheduler+0x140>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <xPortStartScheduler+0x140>)
 8003e26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e2c:	f7ff ff64 	bl	8003cf8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e30:	f7ff f8f6 	bl	8003020 <vTaskSwitchContext>
    prvTaskExitError();
 8003e34:	f7ff ff20 	bl	8003c78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000ed00 	.word	0xe000ed00
 8003e48:	410fc271 	.word	0x410fc271
 8003e4c:	410fc270 	.word	0x410fc270
 8003e50:	e000e400 	.word	0xe000e400
 8003e54:	200001d4 	.word	0x200001d4
 8003e58:	200001d8 	.word	0x200001d8
 8003e5c:	e000ed20 	.word	0xe000ed20
 8003e60:	20000010 	.word	0x20000010
 8003e64:	e000ef34 	.word	0xe000ef34

08003e68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	607b      	str	r3, [r7, #4]
    }
 8003e80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <vPortEnterCritical+0x58>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <vPortEnterCritical+0x58>)
 8003e8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <vPortEnterCritical+0x58>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10f      	bne.n	8003eb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <vPortEnterCritical+0x5c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	603b      	str	r3, [r7, #0]
    }
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <vPortEnterCritical+0x4a>
    }
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	20000010 	.word	0x20000010
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <vPortExitCritical+0x50>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <vPortExitCritical+0x24>
        __asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	607b      	str	r3, [r7, #4]
    }
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <vPortExitCritical+0x50>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <vPortExitCritical+0x50>)
 8003ef4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <vPortExitCritical+0x50>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <vPortExitCritical+0x42>
 8003efe:	2300      	movs	r3, #0
 8003f00:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	00000000 	.word	0x00000000

08003f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f20:	f3ef 8009 	mrs	r0, PSP
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <pxCurrentTCBConst>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	f01e 0f10 	tst.w	lr, #16
 8003f30:	bf08      	it	eq
 8003f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3a:	6010      	str	r0, [r2, #0]
 8003f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f44:	f380 8811 	msr	BASEPRI, r0
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f7ff f866 	bl	8003020 <vTaskSwitchContext>
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f380 8811 	msr	BASEPRI, r0
 8003f5c:	bc09      	pop	{r0, r3}
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	6808      	ldr	r0, [r1, #0]
 8003f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f66:	f01e 0f10 	tst.w	lr, #16
 8003f6a:	bf08      	it	eq
 8003f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f70:	f380 8809 	msr	PSP, r0
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst>:
 8003f80:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	607b      	str	r3, [r7, #4]
    }
 8003fa0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003fa2:	f7fe ff27 	bl	8002df4 <xTaskIncrementTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <SysTick_Handler+0x40>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f383 8811 	msr	BASEPRI, r3
    }
 8003fbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <vPortSetupTimerInterrupt+0x34>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <vPortSetupTimerInterrupt+0x38>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <vPortSetupTimerInterrupt+0x3c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	; (800400c <vPortSetupTimerInterrupt+0x40>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <vPortSetupTimerInterrupt+0x44>)
 8003fea:	3b01      	subs	r3, #1
 8003fec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <vPortSetupTimerInterrupt+0x34>)
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e010 	.word	0xe000e010
 8004004:	e000e018 	.word	0xe000e018
 8004008:	20000000 	.word	0x20000000
 800400c:	10624dd3 	.word	0x10624dd3
 8004010:	e000e014 	.word	0xe000e014

08004014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004024 <vPortEnableVFP+0x10>
 8004018:	6801      	ldr	r1, [r0, #0]
 800401a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800401e:	6001      	str	r1, [r0, #0]
 8004020:	4770      	bx	lr
 8004022:	0000      	.short	0x0000
 8004024:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop

0800402c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004038:	f7fe fdc2 	bl	8002bc0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800403c:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <pvPortMalloc+0x1a8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004044:	f000 f934 	bl	80042b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004048:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <pvPortMalloc+0x1ac>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 80a7 	bne.w	80041a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800405c:	2208      	movs	r2, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d227      	bcs.n	80040b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004068:	2208      	movs	r2, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	2b00      	cmp	r3, #0
 8004078:	d021      	beq.n	80040be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	3308      	adds	r3, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d214      	bcs.n	80040b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f023 0307 	bic.w	r3, r3, #7
 800408e:	3308      	adds	r3, #8
 8004090:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <pvPortMalloc+0x92>
        __asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	617b      	str	r3, [r7, #20]
    }
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040b6:	e002      	b.n	80040be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e000      	b.n	80040c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06e      	beq.n	80041a4 <pvPortMalloc+0x178>
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <pvPortMalloc+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d869      	bhi.n	80041a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <pvPortMalloc+0x1b4>)
 80040d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <pvPortMalloc+0x1b4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040da:	e004      	b.n	80040e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <pvPortMalloc+0xcc>
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f1      	bne.n	80040dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <pvPortMalloc+0x1a8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d050      	beq.n	80041a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	4413      	add	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	2308      	movs	r3, #8
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	429a      	cmp	r2, r3
 8004122:	d91f      	bls.n	8004164 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <pvPortMalloc+0x120>
        __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	613b      	str	r3, [r7, #16]
    }
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800415e:	69b8      	ldr	r0, [r7, #24]
 8004160:	f000 f908 	bl	8004374 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <pvPortMalloc+0x1b0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <pvPortMalloc+0x1b0>)
 8004170:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <pvPortMalloc+0x1b0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <pvPortMalloc+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d203      	bcs.n	8004186 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <pvPortMalloc+0x1b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <pvPortMalloc+0x1b8>)
 8004184:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <pvPortMalloc+0x1ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	431a      	orrs	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <pvPortMalloc+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <pvPortMalloc+0x1bc>)
 80041a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041a4:	f7fe fd1a 	bl	8002bdc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <pvPortMalloc+0x19c>
        __asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
    }
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80041c8:	69fb      	ldr	r3, [r7, #28]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20012de4 	.word	0x20012de4
 80041d8:	20012df8 	.word	0x20012df8
 80041dc:	20012de8 	.word	0x20012de8
 80041e0:	20012ddc 	.word	0x20012ddc
 80041e4:	20012dec 	.word	0x20012dec
 80041e8:	20012df0 	.word	0x20012df0

080041ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04d      	beq.n	800429a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041fe:	2308      	movs	r3, #8
 8004200:	425b      	negs	r3, r3
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <vPortFree+0xb8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <vPortFree+0x44>
        __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
    }
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <vPortFree+0x62>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60bb      	str	r3, [r7, #8]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <vPortFree+0xb8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11a      	bne.n	800429a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <vPortFree+0xb8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004274:	f7fe fca4 	bl	8002bc0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <vPortFree+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4413      	add	r3, r2
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <vPortFree+0xbc>)
 8004284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004286:	6938      	ldr	r0, [r7, #16]
 8004288:	f000 f874 	bl	8004374 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <vPortFree+0xc0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a06      	ldr	r2, [pc, #24]	; (80042ac <vPortFree+0xc0>)
 8004294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004296:	f7fe fca1 	bl	8002bdc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20012df8 	.word	0x20012df8
 80042a8:	20012de8 	.word	0x20012de8
 80042ac:	20012df4 	.word	0x20012df4

080042b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <prvHeapInit+0xac>)
 80042be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3307      	adds	r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <prvHeapInit+0xac>)
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <prvHeapInit+0xb0>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <prvHeapInit+0xb0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042fc:	2208      	movs	r2, #8
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <prvHeapInit+0xb4>)
 8004310:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <prvHeapInit+0xb4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <prvHeapInit+0xb4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <prvHeapInit+0xb4>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <prvHeapInit+0xb8>)
 800433e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a09      	ldr	r2, [pc, #36]	; (800436c <prvHeapInit+0xbc>)
 8004346:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <prvHeapInit+0xc0>)
 800434a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	200001dc 	.word	0x200001dc
 8004360:	20012ddc 	.word	0x20012ddc
 8004364:	20012de4 	.word	0x20012de4
 8004368:	20012dec 	.word	0x20012dec
 800436c:	20012de8 	.word	0x20012de8
 8004370:	20012df8 	.word	0x20012df8

08004374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <prvInsertBlockIntoFreeList+0xac>)
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e002      	b.n	8004388 <prvInsertBlockIntoFreeList+0x14>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d8f7      	bhi.n	8004382 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d108      	bne.n	80043b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d118      	bne.n	80043fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <prvInsertBlockIntoFreeList+0xb0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d00d      	beq.n	80043f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e008      	b.n	8004404 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <prvInsertBlockIntoFreeList+0xb0>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e003      	b.n	8004404 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d002      	beq.n	8004412 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20012ddc 	.word	0x20012ddc
 8004424:	20012de4 	.word	0x20012de4

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 ff92 	bl	8005364 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08005494 	.word	0x08005494
 8004464:	08005494 	.word	0x08005494
 8004468:	08005494 	.word	0x08005494
 800446c:	08005498 	.word	0x08005498

08004470 <memcpy>:
 8004470:	440a      	add	r2, r1
 8004472:	4291      	cmp	r1, r2
 8004474:	f100 33ff 	add.w	r3, r0, #4294967295
 8004478:	d100      	bne.n	800447c <memcpy+0xc>
 800447a:	4770      	bx	lr
 800447c:	b510      	push	{r4, lr}
 800447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004486:	4291      	cmp	r1, r2
 8004488:	d1f9      	bne.n	800447e <memcpy+0xe>
 800448a:	bd10      	pop	{r4, pc}

0800448c <memset>:
 800448c:	4402      	add	r2, r0
 800448e:	4603      	mov	r3, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <iprintf>:
 800449c:	b40f      	push	{r0, r1, r2, r3}
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <iprintf+0x2c>)
 80044a0:	b513      	push	{r0, r1, r4, lr}
 80044a2:	681c      	ldr	r4, [r3, #0]
 80044a4:	b124      	cbz	r4, 80044b0 <iprintf+0x14>
 80044a6:	69a3      	ldr	r3, [r4, #24]
 80044a8:	b913      	cbnz	r3, 80044b0 <iprintf+0x14>
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 f866 	bl	800457c <__sinit>
 80044b0:	ab05      	add	r3, sp, #20
 80044b2:	9a04      	ldr	r2, [sp, #16]
 80044b4:	68a1      	ldr	r1, [r4, #8]
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	4620      	mov	r0, r4
 80044ba:	f000 f983 	bl	80047c4 <_vfiprintf_r>
 80044be:	b002      	add	sp, #8
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c4:	b004      	add	sp, #16
 80044c6:	4770      	bx	lr
 80044c8:	20000014 	.word	0x20000014

080044cc <std>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b510      	push	{r4, lr}
 80044d0:	4604      	mov	r4, r0
 80044d2:	e9c0 3300 	strd	r3, r3, [r0]
 80044d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044da:	6083      	str	r3, [r0, #8]
 80044dc:	8181      	strh	r1, [r0, #12]
 80044de:	6643      	str	r3, [r0, #100]	; 0x64
 80044e0:	81c2      	strh	r2, [r0, #14]
 80044e2:	6183      	str	r3, [r0, #24]
 80044e4:	4619      	mov	r1, r3
 80044e6:	2208      	movs	r2, #8
 80044e8:	305c      	adds	r0, #92	; 0x5c
 80044ea:	f7ff ffcf 	bl	800448c <memset>
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <std+0x38>)
 80044f0:	6263      	str	r3, [r4, #36]	; 0x24
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <std+0x3c>)
 80044f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <std+0x40>)
 80044f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std+0x44>)
 80044fc:	6224      	str	r4, [r4, #32]
 80044fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004500:	bd10      	pop	{r4, pc}
 8004502:	bf00      	nop
 8004504:	08004d6d 	.word	0x08004d6d
 8004508:	08004d8f 	.word	0x08004d8f
 800450c:	08004dc7 	.word	0x08004dc7
 8004510:	08004deb 	.word	0x08004deb

08004514 <_cleanup_r>:
 8004514:	4901      	ldr	r1, [pc, #4]	; (800451c <_cleanup_r+0x8>)
 8004516:	f000 b8af 	b.w	8004678 <_fwalk_reent>
 800451a:	bf00      	nop
 800451c:	080050c5 	.word	0x080050c5

08004520 <__sfmoreglue>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	1e4a      	subs	r2, r1, #1
 8004524:	2568      	movs	r5, #104	; 0x68
 8004526:	4355      	muls	r5, r2
 8004528:	460e      	mov	r6, r1
 800452a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800452e:	f000 f8c5 	bl	80046bc <_malloc_r>
 8004532:	4604      	mov	r4, r0
 8004534:	b140      	cbz	r0, 8004548 <__sfmoreglue+0x28>
 8004536:	2100      	movs	r1, #0
 8004538:	e9c0 1600 	strd	r1, r6, [r0]
 800453c:	300c      	adds	r0, #12
 800453e:	60a0      	str	r0, [r4, #8]
 8004540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004544:	f7ff ffa2 	bl	800448c <memset>
 8004548:	4620      	mov	r0, r4
 800454a:	bd70      	pop	{r4, r5, r6, pc}

0800454c <__sfp_lock_acquire>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__sfp_lock_acquire+0x8>)
 800454e:	f000 b8b3 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	20012e9c 	.word	0x20012e9c

08004558 <__sfp_lock_release>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__sfp_lock_release+0x8>)
 800455a:	f000 b8ae 	b.w	80046ba <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	20012e9c 	.word	0x20012e9c

08004564 <__sinit_lock_acquire>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__sinit_lock_acquire+0x8>)
 8004566:	f000 b8a7 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 800456a:	bf00      	nop
 800456c:	20012e97 	.word	0x20012e97

08004570 <__sinit_lock_release>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__sinit_lock_release+0x8>)
 8004572:	f000 b8a2 	b.w	80046ba <__retarget_lock_release_recursive>
 8004576:	bf00      	nop
 8004578:	20012e97 	.word	0x20012e97

0800457c <__sinit>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
 8004580:	f7ff fff0 	bl	8004564 <__sinit_lock_acquire>
 8004584:	69a3      	ldr	r3, [r4, #24]
 8004586:	b11b      	cbz	r3, 8004590 <__sinit+0x14>
 8004588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458c:	f7ff bff0 	b.w	8004570 <__sinit_lock_release>
 8004590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004594:	6523      	str	r3, [r4, #80]	; 0x50
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <__sinit+0x68>)
 8004598:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <__sinit+0x6c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	62a2      	str	r2, [r4, #40]	; 0x28
 800459e:	42a3      	cmp	r3, r4
 80045a0:	bf04      	itt	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	61a3      	streq	r3, [r4, #24]
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 f820 	bl	80045ec <__sfp>
 80045ac:	6060      	str	r0, [r4, #4]
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 f81c 	bl	80045ec <__sfp>
 80045b4:	60a0      	str	r0, [r4, #8]
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 f818 	bl	80045ec <__sfp>
 80045bc:	2200      	movs	r2, #0
 80045be:	60e0      	str	r0, [r4, #12]
 80045c0:	2104      	movs	r1, #4
 80045c2:	6860      	ldr	r0, [r4, #4]
 80045c4:	f7ff ff82 	bl	80044cc <std>
 80045c8:	68a0      	ldr	r0, [r4, #8]
 80045ca:	2201      	movs	r2, #1
 80045cc:	2109      	movs	r1, #9
 80045ce:	f7ff ff7d 	bl	80044cc <std>
 80045d2:	68e0      	ldr	r0, [r4, #12]
 80045d4:	2202      	movs	r2, #2
 80045d6:	2112      	movs	r1, #18
 80045d8:	f7ff ff78 	bl	80044cc <std>
 80045dc:	2301      	movs	r3, #1
 80045de:	61a3      	str	r3, [r4, #24]
 80045e0:	e7d2      	b.n	8004588 <__sinit+0xc>
 80045e2:	bf00      	nop
 80045e4:	080053f4 	.word	0x080053f4
 80045e8:	08004515 	.word	0x08004515

080045ec <__sfp>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	4607      	mov	r7, r0
 80045f0:	f7ff ffac 	bl	800454c <__sfp_lock_acquire>
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <__sfp+0x84>)
 80045f6:	681e      	ldr	r6, [r3, #0]
 80045f8:	69b3      	ldr	r3, [r6, #24]
 80045fa:	b913      	cbnz	r3, 8004602 <__sfp+0x16>
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff ffbd 	bl	800457c <__sinit>
 8004602:	3648      	adds	r6, #72	; 0x48
 8004604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004608:	3b01      	subs	r3, #1
 800460a:	d503      	bpl.n	8004614 <__sfp+0x28>
 800460c:	6833      	ldr	r3, [r6, #0]
 800460e:	b30b      	cbz	r3, 8004654 <__sfp+0x68>
 8004610:	6836      	ldr	r6, [r6, #0]
 8004612:	e7f7      	b.n	8004604 <__sfp+0x18>
 8004614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004618:	b9d5      	cbnz	r5, 8004650 <__sfp+0x64>
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <__sfp+0x88>)
 800461c:	60e3      	str	r3, [r4, #12]
 800461e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004622:	6665      	str	r5, [r4, #100]	; 0x64
 8004624:	f000 f847 	bl	80046b6 <__retarget_lock_init_recursive>
 8004628:	f7ff ff96 	bl	8004558 <__sfp_lock_release>
 800462c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	61a5      	str	r5, [r4, #24]
 8004638:	2208      	movs	r2, #8
 800463a:	4629      	mov	r1, r5
 800463c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004640:	f7ff ff24 	bl	800448c <memset>
 8004644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800464c:	4620      	mov	r0, r4
 800464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004650:	3468      	adds	r4, #104	; 0x68
 8004652:	e7d9      	b.n	8004608 <__sfp+0x1c>
 8004654:	2104      	movs	r1, #4
 8004656:	4638      	mov	r0, r7
 8004658:	f7ff ff62 	bl	8004520 <__sfmoreglue>
 800465c:	4604      	mov	r4, r0
 800465e:	6030      	str	r0, [r6, #0]
 8004660:	2800      	cmp	r0, #0
 8004662:	d1d5      	bne.n	8004610 <__sfp+0x24>
 8004664:	f7ff ff78 	bl	8004558 <__sfp_lock_release>
 8004668:	230c      	movs	r3, #12
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	e7ee      	b.n	800464c <__sfp+0x60>
 800466e:	bf00      	nop
 8004670:	080053f4 	.word	0x080053f4
 8004674:	ffff0001 	.word	0xffff0001

08004678 <_fwalk_reent>:
 8004678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800467c:	4606      	mov	r6, r0
 800467e:	4688      	mov	r8, r1
 8004680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004684:	2700      	movs	r7, #0
 8004686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800468a:	f1b9 0901 	subs.w	r9, r9, #1
 800468e:	d505      	bpl.n	800469c <_fwalk_reent+0x24>
 8004690:	6824      	ldr	r4, [r4, #0]
 8004692:	2c00      	cmp	r4, #0
 8004694:	d1f7      	bne.n	8004686 <_fwalk_reent+0xe>
 8004696:	4638      	mov	r0, r7
 8004698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800469c:	89ab      	ldrh	r3, [r5, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d907      	bls.n	80046b2 <_fwalk_reent+0x3a>
 80046a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046a6:	3301      	adds	r3, #1
 80046a8:	d003      	beq.n	80046b2 <_fwalk_reent+0x3a>
 80046aa:	4629      	mov	r1, r5
 80046ac:	4630      	mov	r0, r6
 80046ae:	47c0      	blx	r8
 80046b0:	4307      	orrs	r7, r0
 80046b2:	3568      	adds	r5, #104	; 0x68
 80046b4:	e7e9      	b.n	800468a <_fwalk_reent+0x12>

080046b6 <__retarget_lock_init_recursive>:
 80046b6:	4770      	bx	lr

080046b8 <__retarget_lock_acquire_recursive>:
 80046b8:	4770      	bx	lr

080046ba <__retarget_lock_release_recursive>:
 80046ba:	4770      	bx	lr

080046bc <_malloc_r>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	1ccd      	adds	r5, r1, #3
 80046c0:	f025 0503 	bic.w	r5, r5, #3
 80046c4:	3508      	adds	r5, #8
 80046c6:	2d0c      	cmp	r5, #12
 80046c8:	bf38      	it	cc
 80046ca:	250c      	movcc	r5, #12
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	4606      	mov	r6, r0
 80046d0:	db01      	blt.n	80046d6 <_malloc_r+0x1a>
 80046d2:	42a9      	cmp	r1, r5
 80046d4:	d903      	bls.n	80046de <_malloc_r+0x22>
 80046d6:	230c      	movs	r3, #12
 80046d8:	6033      	str	r3, [r6, #0]
 80046da:	2000      	movs	r0, #0
 80046dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046de:	f000 fda3 	bl	8005228 <__malloc_lock>
 80046e2:	4921      	ldr	r1, [pc, #132]	; (8004768 <_malloc_r+0xac>)
 80046e4:	680a      	ldr	r2, [r1, #0]
 80046e6:	4614      	mov	r4, r2
 80046e8:	b99c      	cbnz	r4, 8004712 <_malloc_r+0x56>
 80046ea:	4f20      	ldr	r7, [pc, #128]	; (800476c <_malloc_r+0xb0>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	b923      	cbnz	r3, 80046fa <_malloc_r+0x3e>
 80046f0:	4621      	mov	r1, r4
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 fb2a 	bl	8004d4c <_sbrk_r>
 80046f8:	6038      	str	r0, [r7, #0]
 80046fa:	4629      	mov	r1, r5
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 fb25 	bl	8004d4c <_sbrk_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	d123      	bne.n	800474e <_malloc_r+0x92>
 8004706:	230c      	movs	r3, #12
 8004708:	6033      	str	r3, [r6, #0]
 800470a:	4630      	mov	r0, r6
 800470c:	f000 fd92 	bl	8005234 <__malloc_unlock>
 8004710:	e7e3      	b.n	80046da <_malloc_r+0x1e>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	1b5b      	subs	r3, r3, r5
 8004716:	d417      	bmi.n	8004748 <_malloc_r+0x8c>
 8004718:	2b0b      	cmp	r3, #11
 800471a:	d903      	bls.n	8004724 <_malloc_r+0x68>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	441c      	add	r4, r3
 8004720:	6025      	str	r5, [r4, #0]
 8004722:	e004      	b.n	800472e <_malloc_r+0x72>
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	42a2      	cmp	r2, r4
 8004728:	bf0c      	ite	eq
 800472a:	600b      	streq	r3, [r1, #0]
 800472c:	6053      	strne	r3, [r2, #4]
 800472e:	4630      	mov	r0, r6
 8004730:	f000 fd80 	bl	8005234 <__malloc_unlock>
 8004734:	f104 000b 	add.w	r0, r4, #11
 8004738:	1d23      	adds	r3, r4, #4
 800473a:	f020 0007 	bic.w	r0, r0, #7
 800473e:	1ac2      	subs	r2, r0, r3
 8004740:	d0cc      	beq.n	80046dc <_malloc_r+0x20>
 8004742:	1a1b      	subs	r3, r3, r0
 8004744:	50a3      	str	r3, [r4, r2]
 8004746:	e7c9      	b.n	80046dc <_malloc_r+0x20>
 8004748:	4622      	mov	r2, r4
 800474a:	6864      	ldr	r4, [r4, #4]
 800474c:	e7cc      	b.n	80046e8 <_malloc_r+0x2c>
 800474e:	1cc4      	adds	r4, r0, #3
 8004750:	f024 0403 	bic.w	r4, r4, #3
 8004754:	42a0      	cmp	r0, r4
 8004756:	d0e3      	beq.n	8004720 <_malloc_r+0x64>
 8004758:	1a21      	subs	r1, r4, r0
 800475a:	4630      	mov	r0, r6
 800475c:	f000 faf6 	bl	8004d4c <_sbrk_r>
 8004760:	3001      	adds	r0, #1
 8004762:	d1dd      	bne.n	8004720 <_malloc_r+0x64>
 8004764:	e7cf      	b.n	8004706 <_malloc_r+0x4a>
 8004766:	bf00      	nop
 8004768:	20012dfc 	.word	0x20012dfc
 800476c:	20012e00 	.word	0x20012e00

08004770 <__sfputc_r>:
 8004770:	6893      	ldr	r3, [r2, #8]
 8004772:	3b01      	subs	r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	b410      	push	{r4}
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	da08      	bge.n	800478e <__sfputc_r+0x1e>
 800477c:	6994      	ldr	r4, [r2, #24]
 800477e:	42a3      	cmp	r3, r4
 8004780:	db01      	blt.n	8004786 <__sfputc_r+0x16>
 8004782:	290a      	cmp	r1, #10
 8004784:	d103      	bne.n	800478e <__sfputc_r+0x1e>
 8004786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800478a:	f000 bb33 	b.w	8004df4 <__swbuf_r>
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	1c58      	adds	r0, r3, #1
 8004792:	6010      	str	r0, [r2, #0]
 8004794:	7019      	strb	r1, [r3, #0]
 8004796:	4608      	mov	r0, r1
 8004798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479c:	4770      	bx	lr

0800479e <__sfputs_r>:
 800479e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a0:	4606      	mov	r6, r0
 80047a2:	460f      	mov	r7, r1
 80047a4:	4614      	mov	r4, r2
 80047a6:	18d5      	adds	r5, r2, r3
 80047a8:	42ac      	cmp	r4, r5
 80047aa:	d101      	bne.n	80047b0 <__sfputs_r+0x12>
 80047ac:	2000      	movs	r0, #0
 80047ae:	e007      	b.n	80047c0 <__sfputs_r+0x22>
 80047b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b4:	463a      	mov	r2, r7
 80047b6:	4630      	mov	r0, r6
 80047b8:	f7ff ffda 	bl	8004770 <__sfputc_r>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d1f3      	bne.n	80047a8 <__sfputs_r+0xa>
 80047c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047c4 <_vfiprintf_r>:
 80047c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c8:	460d      	mov	r5, r1
 80047ca:	b09d      	sub	sp, #116	; 0x74
 80047cc:	4614      	mov	r4, r2
 80047ce:	4698      	mov	r8, r3
 80047d0:	4606      	mov	r6, r0
 80047d2:	b118      	cbz	r0, 80047dc <_vfiprintf_r+0x18>
 80047d4:	6983      	ldr	r3, [r0, #24]
 80047d6:	b90b      	cbnz	r3, 80047dc <_vfiprintf_r+0x18>
 80047d8:	f7ff fed0 	bl	800457c <__sinit>
 80047dc:	4b89      	ldr	r3, [pc, #548]	; (8004a04 <_vfiprintf_r+0x240>)
 80047de:	429d      	cmp	r5, r3
 80047e0:	d11b      	bne.n	800481a <_vfiprintf_r+0x56>
 80047e2:	6875      	ldr	r5, [r6, #4]
 80047e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047e6:	07d9      	lsls	r1, r3, #31
 80047e8:	d405      	bmi.n	80047f6 <_vfiprintf_r+0x32>
 80047ea:	89ab      	ldrh	r3, [r5, #12]
 80047ec:	059a      	lsls	r2, r3, #22
 80047ee:	d402      	bmi.n	80047f6 <_vfiprintf_r+0x32>
 80047f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047f2:	f7ff ff61 	bl	80046b8 <__retarget_lock_acquire_recursive>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	071b      	lsls	r3, r3, #28
 80047fa:	d501      	bpl.n	8004800 <_vfiprintf_r+0x3c>
 80047fc:	692b      	ldr	r3, [r5, #16]
 80047fe:	b9eb      	cbnz	r3, 800483c <_vfiprintf_r+0x78>
 8004800:	4629      	mov	r1, r5
 8004802:	4630      	mov	r0, r6
 8004804:	f000 fb5a 	bl	8004ebc <__swsetup_r>
 8004808:	b1c0      	cbz	r0, 800483c <_vfiprintf_r+0x78>
 800480a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800480c:	07dc      	lsls	r4, r3, #31
 800480e:	d50e      	bpl.n	800482e <_vfiprintf_r+0x6a>
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	b01d      	add	sp, #116	; 0x74
 8004816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481a:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <_vfiprintf_r+0x244>)
 800481c:	429d      	cmp	r5, r3
 800481e:	d101      	bne.n	8004824 <_vfiprintf_r+0x60>
 8004820:	68b5      	ldr	r5, [r6, #8]
 8004822:	e7df      	b.n	80047e4 <_vfiprintf_r+0x20>
 8004824:	4b79      	ldr	r3, [pc, #484]	; (8004a0c <_vfiprintf_r+0x248>)
 8004826:	429d      	cmp	r5, r3
 8004828:	bf08      	it	eq
 800482a:	68f5      	ldreq	r5, [r6, #12]
 800482c:	e7da      	b.n	80047e4 <_vfiprintf_r+0x20>
 800482e:	89ab      	ldrh	r3, [r5, #12]
 8004830:	0598      	lsls	r0, r3, #22
 8004832:	d4ed      	bmi.n	8004810 <_vfiprintf_r+0x4c>
 8004834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004836:	f7ff ff40 	bl	80046ba <__retarget_lock_release_recursive>
 800483a:	e7e9      	b.n	8004810 <_vfiprintf_r+0x4c>
 800483c:	2300      	movs	r3, #0
 800483e:	9309      	str	r3, [sp, #36]	; 0x24
 8004840:	2320      	movs	r3, #32
 8004842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004846:	f8cd 800c 	str.w	r8, [sp, #12]
 800484a:	2330      	movs	r3, #48	; 0x30
 800484c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a10 <_vfiprintf_r+0x24c>
 8004850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004854:	f04f 0901 	mov.w	r9, #1
 8004858:	4623      	mov	r3, r4
 800485a:	469a      	mov	sl, r3
 800485c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004860:	b10a      	cbz	r2, 8004866 <_vfiprintf_r+0xa2>
 8004862:	2a25      	cmp	r2, #37	; 0x25
 8004864:	d1f9      	bne.n	800485a <_vfiprintf_r+0x96>
 8004866:	ebba 0b04 	subs.w	fp, sl, r4
 800486a:	d00b      	beq.n	8004884 <_vfiprintf_r+0xc0>
 800486c:	465b      	mov	r3, fp
 800486e:	4622      	mov	r2, r4
 8004870:	4629      	mov	r1, r5
 8004872:	4630      	mov	r0, r6
 8004874:	f7ff ff93 	bl	800479e <__sfputs_r>
 8004878:	3001      	adds	r0, #1
 800487a:	f000 80aa 	beq.w	80049d2 <_vfiprintf_r+0x20e>
 800487e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004880:	445a      	add	r2, fp
 8004882:	9209      	str	r2, [sp, #36]	; 0x24
 8004884:	f89a 3000 	ldrb.w	r3, [sl]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80a2 	beq.w	80049d2 <_vfiprintf_r+0x20e>
 800488e:	2300      	movs	r3, #0
 8004890:	f04f 32ff 	mov.w	r2, #4294967295
 8004894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004898:	f10a 0a01 	add.w	sl, sl, #1
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	9307      	str	r3, [sp, #28]
 80048a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048a4:	931a      	str	r3, [sp, #104]	; 0x68
 80048a6:	4654      	mov	r4, sl
 80048a8:	2205      	movs	r2, #5
 80048aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ae:	4858      	ldr	r0, [pc, #352]	; (8004a10 <_vfiprintf_r+0x24c>)
 80048b0:	f7fb fc8e 	bl	80001d0 <memchr>
 80048b4:	9a04      	ldr	r2, [sp, #16]
 80048b6:	b9d8      	cbnz	r0, 80048f0 <_vfiprintf_r+0x12c>
 80048b8:	06d1      	lsls	r1, r2, #27
 80048ba:	bf44      	itt	mi
 80048bc:	2320      	movmi	r3, #32
 80048be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c2:	0713      	lsls	r3, r2, #28
 80048c4:	bf44      	itt	mi
 80048c6:	232b      	movmi	r3, #43	; 0x2b
 80048c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048cc:	f89a 3000 	ldrb.w	r3, [sl]
 80048d0:	2b2a      	cmp	r3, #42	; 0x2a
 80048d2:	d015      	beq.n	8004900 <_vfiprintf_r+0x13c>
 80048d4:	9a07      	ldr	r2, [sp, #28]
 80048d6:	4654      	mov	r4, sl
 80048d8:	2000      	movs	r0, #0
 80048da:	f04f 0c0a 	mov.w	ip, #10
 80048de:	4621      	mov	r1, r4
 80048e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e4:	3b30      	subs	r3, #48	; 0x30
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d94e      	bls.n	8004988 <_vfiprintf_r+0x1c4>
 80048ea:	b1b0      	cbz	r0, 800491a <_vfiprintf_r+0x156>
 80048ec:	9207      	str	r2, [sp, #28]
 80048ee:	e014      	b.n	800491a <_vfiprintf_r+0x156>
 80048f0:	eba0 0308 	sub.w	r3, r0, r8
 80048f4:	fa09 f303 	lsl.w	r3, r9, r3
 80048f8:	4313      	orrs	r3, r2
 80048fa:	9304      	str	r3, [sp, #16]
 80048fc:	46a2      	mov	sl, r4
 80048fe:	e7d2      	b.n	80048a6 <_vfiprintf_r+0xe2>
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	1d19      	adds	r1, r3, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	9103      	str	r1, [sp, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	bfbb      	ittet	lt
 800490c:	425b      	neglt	r3, r3
 800490e:	f042 0202 	orrlt.w	r2, r2, #2
 8004912:	9307      	strge	r3, [sp, #28]
 8004914:	9307      	strlt	r3, [sp, #28]
 8004916:	bfb8      	it	lt
 8004918:	9204      	strlt	r2, [sp, #16]
 800491a:	7823      	ldrb	r3, [r4, #0]
 800491c:	2b2e      	cmp	r3, #46	; 0x2e
 800491e:	d10c      	bne.n	800493a <_vfiprintf_r+0x176>
 8004920:	7863      	ldrb	r3, [r4, #1]
 8004922:	2b2a      	cmp	r3, #42	; 0x2a
 8004924:	d135      	bne.n	8004992 <_vfiprintf_r+0x1ce>
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	1d1a      	adds	r2, r3, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	9203      	str	r2, [sp, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	bfb8      	it	lt
 8004932:	f04f 33ff 	movlt.w	r3, #4294967295
 8004936:	3402      	adds	r4, #2
 8004938:	9305      	str	r3, [sp, #20]
 800493a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a20 <_vfiprintf_r+0x25c>
 800493e:	7821      	ldrb	r1, [r4, #0]
 8004940:	2203      	movs	r2, #3
 8004942:	4650      	mov	r0, sl
 8004944:	f7fb fc44 	bl	80001d0 <memchr>
 8004948:	b140      	cbz	r0, 800495c <_vfiprintf_r+0x198>
 800494a:	2340      	movs	r3, #64	; 0x40
 800494c:	eba0 000a 	sub.w	r0, r0, sl
 8004950:	fa03 f000 	lsl.w	r0, r3, r0
 8004954:	9b04      	ldr	r3, [sp, #16]
 8004956:	4303      	orrs	r3, r0
 8004958:	3401      	adds	r4, #1
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	482c      	ldr	r0, [pc, #176]	; (8004a14 <_vfiprintf_r+0x250>)
 8004962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004966:	2206      	movs	r2, #6
 8004968:	f7fb fc32 	bl	80001d0 <memchr>
 800496c:	2800      	cmp	r0, #0
 800496e:	d03f      	beq.n	80049f0 <_vfiprintf_r+0x22c>
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <_vfiprintf_r+0x254>)
 8004972:	bb1b      	cbnz	r3, 80049bc <_vfiprintf_r+0x1f8>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	3307      	adds	r3, #7
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	3308      	adds	r3, #8
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004982:	443b      	add	r3, r7
 8004984:	9309      	str	r3, [sp, #36]	; 0x24
 8004986:	e767      	b.n	8004858 <_vfiprintf_r+0x94>
 8004988:	fb0c 3202 	mla	r2, ip, r2, r3
 800498c:	460c      	mov	r4, r1
 800498e:	2001      	movs	r0, #1
 8004990:	e7a5      	b.n	80048de <_vfiprintf_r+0x11a>
 8004992:	2300      	movs	r3, #0
 8004994:	3401      	adds	r4, #1
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 0c0a 	mov.w	ip, #10
 800499e:	4620      	mov	r0, r4
 80049a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a4:	3a30      	subs	r2, #48	; 0x30
 80049a6:	2a09      	cmp	r2, #9
 80049a8:	d903      	bls.n	80049b2 <_vfiprintf_r+0x1ee>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0c5      	beq.n	800493a <_vfiprintf_r+0x176>
 80049ae:	9105      	str	r1, [sp, #20]
 80049b0:	e7c3      	b.n	800493a <_vfiprintf_r+0x176>
 80049b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049b6:	4604      	mov	r4, r0
 80049b8:	2301      	movs	r3, #1
 80049ba:	e7f0      	b.n	800499e <_vfiprintf_r+0x1da>
 80049bc:	ab03      	add	r3, sp, #12
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	462a      	mov	r2, r5
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <_vfiprintf_r+0x258>)
 80049c4:	a904      	add	r1, sp, #16
 80049c6:	4630      	mov	r0, r6
 80049c8:	f3af 8000 	nop.w
 80049cc:	4607      	mov	r7, r0
 80049ce:	1c78      	adds	r0, r7, #1
 80049d0:	d1d6      	bne.n	8004980 <_vfiprintf_r+0x1bc>
 80049d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049d4:	07d9      	lsls	r1, r3, #31
 80049d6:	d405      	bmi.n	80049e4 <_vfiprintf_r+0x220>
 80049d8:	89ab      	ldrh	r3, [r5, #12]
 80049da:	059a      	lsls	r2, r3, #22
 80049dc:	d402      	bmi.n	80049e4 <_vfiprintf_r+0x220>
 80049de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e0:	f7ff fe6b 	bl	80046ba <__retarget_lock_release_recursive>
 80049e4:	89ab      	ldrh	r3, [r5, #12]
 80049e6:	065b      	lsls	r3, r3, #25
 80049e8:	f53f af12 	bmi.w	8004810 <_vfiprintf_r+0x4c>
 80049ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ee:	e711      	b.n	8004814 <_vfiprintf_r+0x50>
 80049f0:	ab03      	add	r3, sp, #12
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	462a      	mov	r2, r5
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <_vfiprintf_r+0x258>)
 80049f8:	a904      	add	r1, sp, #16
 80049fa:	4630      	mov	r0, r6
 80049fc:	f000 f880 	bl	8004b00 <_printf_i>
 8004a00:	e7e4      	b.n	80049cc <_vfiprintf_r+0x208>
 8004a02:	bf00      	nop
 8004a04:	08005418 	.word	0x08005418
 8004a08:	08005438 	.word	0x08005438
 8004a0c:	080053f8 	.word	0x080053f8
 8004a10:	08005458 	.word	0x08005458
 8004a14:	08005462 	.word	0x08005462
 8004a18:	00000000 	.word	0x00000000
 8004a1c:	0800479f 	.word	0x0800479f
 8004a20:	0800545e 	.word	0x0800545e

08004a24 <_printf_common>:
 8004a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a28:	4616      	mov	r6, r2
 8004a2a:	4699      	mov	r9, r3
 8004a2c:	688a      	ldr	r2, [r1, #8]
 8004a2e:	690b      	ldr	r3, [r1, #16]
 8004a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a34:	4293      	cmp	r3, r2
 8004a36:	bfb8      	it	lt
 8004a38:	4613      	movlt	r3, r2
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a40:	4607      	mov	r7, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b10a      	cbz	r2, 8004a4a <_printf_common+0x26>
 8004a46:	3301      	adds	r3, #1
 8004a48:	6033      	str	r3, [r6, #0]
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	0699      	lsls	r1, r3, #26
 8004a4e:	bf42      	ittt	mi
 8004a50:	6833      	ldrmi	r3, [r6, #0]
 8004a52:	3302      	addmi	r3, #2
 8004a54:	6033      	strmi	r3, [r6, #0]
 8004a56:	6825      	ldr	r5, [r4, #0]
 8004a58:	f015 0506 	ands.w	r5, r5, #6
 8004a5c:	d106      	bne.n	8004a6c <_printf_common+0x48>
 8004a5e:	f104 0a19 	add.w	sl, r4, #25
 8004a62:	68e3      	ldr	r3, [r4, #12]
 8004a64:	6832      	ldr	r2, [r6, #0]
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	42ab      	cmp	r3, r5
 8004a6a:	dc26      	bgt.n	8004aba <_printf_common+0x96>
 8004a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a70:	1e13      	subs	r3, r2, #0
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	bf18      	it	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	0692      	lsls	r2, r2, #26
 8004a7a:	d42b      	bmi.n	8004ad4 <_printf_common+0xb0>
 8004a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a80:	4649      	mov	r1, r9
 8004a82:	4638      	mov	r0, r7
 8004a84:	47c0      	blx	r8
 8004a86:	3001      	adds	r0, #1
 8004a88:	d01e      	beq.n	8004ac8 <_printf_common+0xa4>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	68e5      	ldr	r5, [r4, #12]
 8004a8e:	6832      	ldr	r2, [r6, #0]
 8004a90:	f003 0306 	and.w	r3, r3, #6
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	bf08      	it	eq
 8004a98:	1aad      	subeq	r5, r5, r2
 8004a9a:	68a3      	ldr	r3, [r4, #8]
 8004a9c:	6922      	ldr	r2, [r4, #16]
 8004a9e:	bf0c      	ite	eq
 8004aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa4:	2500      	movne	r5, #0
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	bfc4      	itt	gt
 8004aaa:	1a9b      	subgt	r3, r3, r2
 8004aac:	18ed      	addgt	r5, r5, r3
 8004aae:	2600      	movs	r6, #0
 8004ab0:	341a      	adds	r4, #26
 8004ab2:	42b5      	cmp	r5, r6
 8004ab4:	d11a      	bne.n	8004aec <_printf_common+0xc8>
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e008      	b.n	8004acc <_printf_common+0xa8>
 8004aba:	2301      	movs	r3, #1
 8004abc:	4652      	mov	r2, sl
 8004abe:	4649      	mov	r1, r9
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	47c0      	blx	r8
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d103      	bne.n	8004ad0 <_printf_common+0xac>
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	3501      	adds	r5, #1
 8004ad2:	e7c6      	b.n	8004a62 <_printf_common+0x3e>
 8004ad4:	18e1      	adds	r1, r4, r3
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	2030      	movs	r0, #48	; 0x30
 8004ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ade:	4422      	add	r2, r4
 8004ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae8:	3302      	adds	r3, #2
 8004aea:	e7c7      	b.n	8004a7c <_printf_common+0x58>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4622      	mov	r2, r4
 8004af0:	4649      	mov	r1, r9
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c0      	blx	r8
 8004af6:	3001      	adds	r0, #1
 8004af8:	d0e6      	beq.n	8004ac8 <_printf_common+0xa4>
 8004afa:	3601      	adds	r6, #1
 8004afc:	e7d9      	b.n	8004ab2 <_printf_common+0x8e>
	...

08004b00 <_printf_i>:
 8004b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	4691      	mov	r9, r2
 8004b08:	7e27      	ldrb	r7, [r4, #24]
 8004b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b0c:	2f78      	cmp	r7, #120	; 0x78
 8004b0e:	4680      	mov	r8, r0
 8004b10:	469a      	mov	sl, r3
 8004b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b16:	d807      	bhi.n	8004b28 <_printf_i+0x28>
 8004b18:	2f62      	cmp	r7, #98	; 0x62
 8004b1a:	d80a      	bhi.n	8004b32 <_printf_i+0x32>
 8004b1c:	2f00      	cmp	r7, #0
 8004b1e:	f000 80d8 	beq.w	8004cd2 <_printf_i+0x1d2>
 8004b22:	2f58      	cmp	r7, #88	; 0x58
 8004b24:	f000 80a3 	beq.w	8004c6e <_printf_i+0x16e>
 8004b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b30:	e03a      	b.n	8004ba8 <_printf_i+0xa8>
 8004b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b36:	2b15      	cmp	r3, #21
 8004b38:	d8f6      	bhi.n	8004b28 <_printf_i+0x28>
 8004b3a:	a001      	add	r0, pc, #4	; (adr r0, 8004b40 <_printf_i+0x40>)
 8004b3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b40:	08004b99 	.word	0x08004b99
 8004b44:	08004bad 	.word	0x08004bad
 8004b48:	08004b29 	.word	0x08004b29
 8004b4c:	08004b29 	.word	0x08004b29
 8004b50:	08004b29 	.word	0x08004b29
 8004b54:	08004b29 	.word	0x08004b29
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004b29 	.word	0x08004b29
 8004b60:	08004b29 	.word	0x08004b29
 8004b64:	08004b29 	.word	0x08004b29
 8004b68:	08004b29 	.word	0x08004b29
 8004b6c:	08004cb9 	.word	0x08004cb9
 8004b70:	08004bdd 	.word	0x08004bdd
 8004b74:	08004c9b 	.word	0x08004c9b
 8004b78:	08004b29 	.word	0x08004b29
 8004b7c:	08004b29 	.word	0x08004b29
 8004b80:	08004cdb 	.word	0x08004cdb
 8004b84:	08004b29 	.word	0x08004b29
 8004b88:	08004bdd 	.word	0x08004bdd
 8004b8c:	08004b29 	.word	0x08004b29
 8004b90:	08004b29 	.word	0x08004b29
 8004b94:	08004ca3 	.word	0x08004ca3
 8004b98:	680b      	ldr	r3, [r1, #0]
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	600a      	str	r2, [r1, #0]
 8004ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0a3      	b.n	8004cf4 <_printf_i+0x1f4>
 8004bac:	6825      	ldr	r5, [r4, #0]
 8004bae:	6808      	ldr	r0, [r1, #0]
 8004bb0:	062e      	lsls	r6, r5, #24
 8004bb2:	f100 0304 	add.w	r3, r0, #4
 8004bb6:	d50a      	bpl.n	8004bce <_printf_i+0xce>
 8004bb8:	6805      	ldr	r5, [r0, #0]
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	da03      	bge.n	8004bc8 <_printf_i+0xc8>
 8004bc0:	232d      	movs	r3, #45	; 0x2d
 8004bc2:	426d      	negs	r5, r5
 8004bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc8:	485e      	ldr	r0, [pc, #376]	; (8004d44 <_printf_i+0x244>)
 8004bca:	230a      	movs	r3, #10
 8004bcc:	e019      	b.n	8004c02 <_printf_i+0x102>
 8004bce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bd2:	6805      	ldr	r5, [r0, #0]
 8004bd4:	600b      	str	r3, [r1, #0]
 8004bd6:	bf18      	it	ne
 8004bd8:	b22d      	sxthne	r5, r5
 8004bda:	e7ef      	b.n	8004bbc <_printf_i+0xbc>
 8004bdc:	680b      	ldr	r3, [r1, #0]
 8004bde:	6825      	ldr	r5, [r4, #0]
 8004be0:	1d18      	adds	r0, r3, #4
 8004be2:	6008      	str	r0, [r1, #0]
 8004be4:	0628      	lsls	r0, r5, #24
 8004be6:	d501      	bpl.n	8004bec <_printf_i+0xec>
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	e002      	b.n	8004bf2 <_printf_i+0xf2>
 8004bec:	0669      	lsls	r1, r5, #25
 8004bee:	d5fb      	bpl.n	8004be8 <_printf_i+0xe8>
 8004bf0:	881d      	ldrh	r5, [r3, #0]
 8004bf2:	4854      	ldr	r0, [pc, #336]	; (8004d44 <_printf_i+0x244>)
 8004bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2308      	moveq	r3, #8
 8004bfa:	230a      	movne	r3, #10
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c02:	6866      	ldr	r6, [r4, #4]
 8004c04:	60a6      	str	r6, [r4, #8]
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	bfa2      	ittt	ge
 8004c0a:	6821      	ldrge	r1, [r4, #0]
 8004c0c:	f021 0104 	bicge.w	r1, r1, #4
 8004c10:	6021      	strge	r1, [r4, #0]
 8004c12:	b90d      	cbnz	r5, 8004c18 <_printf_i+0x118>
 8004c14:	2e00      	cmp	r6, #0
 8004c16:	d04d      	beq.n	8004cb4 <_printf_i+0x1b4>
 8004c18:	4616      	mov	r6, r2
 8004c1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c1e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c22:	5dc7      	ldrb	r7, [r0, r7]
 8004c24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c28:	462f      	mov	r7, r5
 8004c2a:	42bb      	cmp	r3, r7
 8004c2c:	460d      	mov	r5, r1
 8004c2e:	d9f4      	bls.n	8004c1a <_printf_i+0x11a>
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d10b      	bne.n	8004c4c <_printf_i+0x14c>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	07df      	lsls	r7, r3, #31
 8004c38:	d508      	bpl.n	8004c4c <_printf_i+0x14c>
 8004c3a:	6923      	ldr	r3, [r4, #16]
 8004c3c:	6861      	ldr	r1, [r4, #4]
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	bfde      	ittt	le
 8004c42:	2330      	movle	r3, #48	; 0x30
 8004c44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c4c:	1b92      	subs	r2, r2, r6
 8004c4e:	6122      	str	r2, [r4, #16]
 8004c50:	f8cd a000 	str.w	sl, [sp]
 8004c54:	464b      	mov	r3, r9
 8004c56:	aa03      	add	r2, sp, #12
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	f7ff fee2 	bl	8004a24 <_printf_common>
 8004c60:	3001      	adds	r0, #1
 8004c62:	d14c      	bne.n	8004cfe <_printf_i+0x1fe>
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	b004      	add	sp, #16
 8004c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6e:	4835      	ldr	r0, [pc, #212]	; (8004d44 <_printf_i+0x244>)
 8004c70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	680e      	ldr	r6, [r1, #0]
 8004c78:	061f      	lsls	r7, r3, #24
 8004c7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c7e:	600e      	str	r6, [r1, #0]
 8004c80:	d514      	bpl.n	8004cac <_printf_i+0x1ac>
 8004c82:	07d9      	lsls	r1, r3, #31
 8004c84:	bf44      	itt	mi
 8004c86:	f043 0320 	orrmi.w	r3, r3, #32
 8004c8a:	6023      	strmi	r3, [r4, #0]
 8004c8c:	b91d      	cbnz	r5, 8004c96 <_printf_i+0x196>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	f023 0320 	bic.w	r3, r3, #32
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	2310      	movs	r3, #16
 8004c98:	e7b0      	b.n	8004bfc <_printf_i+0xfc>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f043 0320 	orr.w	r3, r3, #32
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	2378      	movs	r3, #120	; 0x78
 8004ca4:	4828      	ldr	r0, [pc, #160]	; (8004d48 <_printf_i+0x248>)
 8004ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004caa:	e7e3      	b.n	8004c74 <_printf_i+0x174>
 8004cac:	065e      	lsls	r6, r3, #25
 8004cae:	bf48      	it	mi
 8004cb0:	b2ad      	uxthmi	r5, r5
 8004cb2:	e7e6      	b.n	8004c82 <_printf_i+0x182>
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	e7bb      	b.n	8004c30 <_printf_i+0x130>
 8004cb8:	680b      	ldr	r3, [r1, #0]
 8004cba:	6826      	ldr	r6, [r4, #0]
 8004cbc:	6960      	ldr	r0, [r4, #20]
 8004cbe:	1d1d      	adds	r5, r3, #4
 8004cc0:	600d      	str	r5, [r1, #0]
 8004cc2:	0635      	lsls	r5, r6, #24
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	d501      	bpl.n	8004ccc <_printf_i+0x1cc>
 8004cc8:	6018      	str	r0, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_printf_i+0x1d2>
 8004ccc:	0671      	lsls	r1, r6, #25
 8004cce:	d5fb      	bpl.n	8004cc8 <_printf_i+0x1c8>
 8004cd0:	8018      	strh	r0, [r3, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	4616      	mov	r6, r2
 8004cd8:	e7ba      	b.n	8004c50 <_printf_i+0x150>
 8004cda:	680b      	ldr	r3, [r1, #0]
 8004cdc:	1d1a      	adds	r2, r3, #4
 8004cde:	600a      	str	r2, [r1, #0]
 8004ce0:	681e      	ldr	r6, [r3, #0]
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7fb fa72 	bl	80001d0 <memchr>
 8004cec:	b108      	cbz	r0, 8004cf2 <_printf_i+0x1f2>
 8004cee:	1b80      	subs	r0, r0, r6
 8004cf0:	6060      	str	r0, [r4, #4]
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfc:	e7a8      	b.n	8004c50 <_printf_i+0x150>
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	47d0      	blx	sl
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d0ab      	beq.n	8004c64 <_printf_i+0x164>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	079b      	lsls	r3, r3, #30
 8004d10:	d413      	bmi.n	8004d3a <_printf_i+0x23a>
 8004d12:	68e0      	ldr	r0, [r4, #12]
 8004d14:	9b03      	ldr	r3, [sp, #12]
 8004d16:	4298      	cmp	r0, r3
 8004d18:	bfb8      	it	lt
 8004d1a:	4618      	movlt	r0, r3
 8004d1c:	e7a4      	b.n	8004c68 <_printf_i+0x168>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4632      	mov	r2, r6
 8004d22:	4649      	mov	r1, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	47d0      	blx	sl
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d09b      	beq.n	8004c64 <_printf_i+0x164>
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	9903      	ldr	r1, [sp, #12]
 8004d32:	1a5b      	subs	r3, r3, r1
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	dcf2      	bgt.n	8004d1e <_printf_i+0x21e>
 8004d38:	e7eb      	b.n	8004d12 <_printf_i+0x212>
 8004d3a:	2500      	movs	r5, #0
 8004d3c:	f104 0619 	add.w	r6, r4, #25
 8004d40:	e7f5      	b.n	8004d2e <_printf_i+0x22e>
 8004d42:	bf00      	nop
 8004d44:	08005469 	.word	0x08005469
 8004d48:	0800547a 	.word	0x0800547a

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	; (8004d68 <_sbrk_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f000 faf6 	bl	8005348 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20012ea0 	.word	0x20012ea0

08004d6c <__sread>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d74:	f000 fab4 	bl	80052e0 <_read_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	bfab      	itete	ge
 8004d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d80:	181b      	addge	r3, r3, r0
 8004d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d86:	bfac      	ite	ge
 8004d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d8a:	81a3      	strhlt	r3, [r4, #12]
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <__swrite>:
 8004d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d92:	461f      	mov	r7, r3
 8004d94:	898b      	ldrh	r3, [r1, #12]
 8004d96:	05db      	lsls	r3, r3, #23
 8004d98:	4605      	mov	r5, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	d505      	bpl.n	8004dac <__swrite+0x1e>
 8004da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da4:	2302      	movs	r3, #2
 8004da6:	2200      	movs	r2, #0
 8004da8:	f000 f9c8 	bl	800513c <_lseek_r>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	4632      	mov	r2, r6
 8004dba:	463b      	mov	r3, r7
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	f000 b869 	b.w	8004e98 <_write_r>

08004dc6 <__sseek>:
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	460c      	mov	r4, r1
 8004dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dce:	f000 f9b5 	bl	800513c <_lseek_r>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	bf15      	itete	ne
 8004dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004de2:	81a3      	strheq	r3, [r4, #12]
 8004de4:	bf18      	it	ne
 8004de6:	81a3      	strhne	r3, [r4, #12]
 8004de8:	bd10      	pop	{r4, pc}

08004dea <__sclose>:
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 b8d3 	b.w	8004f98 <_close_r>
	...

08004df4 <__swbuf_r>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	460e      	mov	r6, r1
 8004df8:	4614      	mov	r4, r2
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	b118      	cbz	r0, 8004e06 <__swbuf_r+0x12>
 8004dfe:	6983      	ldr	r3, [r0, #24]
 8004e00:	b90b      	cbnz	r3, 8004e06 <__swbuf_r+0x12>
 8004e02:	f7ff fbbb 	bl	800457c <__sinit>
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <__swbuf_r+0x98>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d12b      	bne.n	8004e64 <__swbuf_r+0x70>
 8004e0c:	686c      	ldr	r4, [r5, #4]
 8004e0e:	69a3      	ldr	r3, [r4, #24]
 8004e10:	60a3      	str	r3, [r4, #8]
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	071a      	lsls	r2, r3, #28
 8004e16:	d52f      	bpl.n	8004e78 <__swbuf_r+0x84>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	b36b      	cbz	r3, 8004e78 <__swbuf_r+0x84>
 8004e1c:	6923      	ldr	r3, [r4, #16]
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	1ac0      	subs	r0, r0, r3
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	b2f6      	uxtb	r6, r6
 8004e26:	4283      	cmp	r3, r0
 8004e28:	4637      	mov	r7, r6
 8004e2a:	dc04      	bgt.n	8004e36 <__swbuf_r+0x42>
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f000 f948 	bl	80050c4 <_fflush_r>
 8004e34:	bb30      	cbnz	r0, 8004e84 <__swbuf_r+0x90>
 8004e36:	68a3      	ldr	r3, [r4, #8]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	701e      	strb	r6, [r3, #0]
 8004e44:	6963      	ldr	r3, [r4, #20]
 8004e46:	3001      	adds	r0, #1
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	d004      	beq.n	8004e56 <__swbuf_r+0x62>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	07db      	lsls	r3, r3, #31
 8004e50:	d506      	bpl.n	8004e60 <__swbuf_r+0x6c>
 8004e52:	2e0a      	cmp	r6, #10
 8004e54:	d104      	bne.n	8004e60 <__swbuf_r+0x6c>
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 f933 	bl	80050c4 <_fflush_r>
 8004e5e:	b988      	cbnz	r0, 8004e84 <__swbuf_r+0x90>
 8004e60:	4638      	mov	r0, r7
 8004e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <__swbuf_r+0x9c>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d101      	bne.n	8004e6e <__swbuf_r+0x7a>
 8004e6a:	68ac      	ldr	r4, [r5, #8]
 8004e6c:	e7cf      	b.n	8004e0e <__swbuf_r+0x1a>
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <__swbuf_r+0xa0>)
 8004e70:	429c      	cmp	r4, r3
 8004e72:	bf08      	it	eq
 8004e74:	68ec      	ldreq	r4, [r5, #12]
 8004e76:	e7ca      	b.n	8004e0e <__swbuf_r+0x1a>
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f81e 	bl	8004ebc <__swsetup_r>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d0cb      	beq.n	8004e1c <__swbuf_r+0x28>
 8004e84:	f04f 37ff 	mov.w	r7, #4294967295
 8004e88:	e7ea      	b.n	8004e60 <__swbuf_r+0x6c>
 8004e8a:	bf00      	nop
 8004e8c:	08005418 	.word	0x08005418
 8004e90:	08005438 	.word	0x08005438
 8004e94:	080053f8 	.word	0x080053f8

08004e98 <_write_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d07      	ldr	r5, [pc, #28]	; (8004eb8 <_write_r+0x20>)
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	602a      	str	r2, [r5, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7fb fe93 	bl	8000bd2 <_write>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_write_r+0x1e>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_write_r+0x1e>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20012ea0 	.word	0x20012ea0

08004ebc <__swsetup_r>:
 8004ebc:	4b32      	ldr	r3, [pc, #200]	; (8004f88 <__swsetup_r+0xcc>)
 8004ebe:	b570      	push	{r4, r5, r6, lr}
 8004ec0:	681d      	ldr	r5, [r3, #0]
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	b125      	cbz	r5, 8004ed2 <__swsetup_r+0x16>
 8004ec8:	69ab      	ldr	r3, [r5, #24]
 8004eca:	b913      	cbnz	r3, 8004ed2 <__swsetup_r+0x16>
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f7ff fb55 	bl	800457c <__sinit>
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <__swsetup_r+0xd0>)
 8004ed4:	429c      	cmp	r4, r3
 8004ed6:	d10f      	bne.n	8004ef8 <__swsetup_r+0x3c>
 8004ed8:	686c      	ldr	r4, [r5, #4]
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ee0:	0719      	lsls	r1, r3, #28
 8004ee2:	d42c      	bmi.n	8004f3e <__swsetup_r+0x82>
 8004ee4:	06dd      	lsls	r5, r3, #27
 8004ee6:	d411      	bmi.n	8004f0c <__swsetup_r+0x50>
 8004ee8:	2309      	movs	r3, #9
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef6:	e03e      	b.n	8004f76 <__swsetup_r+0xba>
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <__swsetup_r+0xd4>)
 8004efa:	429c      	cmp	r4, r3
 8004efc:	d101      	bne.n	8004f02 <__swsetup_r+0x46>
 8004efe:	68ac      	ldr	r4, [r5, #8]
 8004f00:	e7eb      	b.n	8004eda <__swsetup_r+0x1e>
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <__swsetup_r+0xd8>)
 8004f04:	429c      	cmp	r4, r3
 8004f06:	bf08      	it	eq
 8004f08:	68ec      	ldreq	r4, [r5, #12]
 8004f0a:	e7e6      	b.n	8004eda <__swsetup_r+0x1e>
 8004f0c:	0758      	lsls	r0, r3, #29
 8004f0e:	d512      	bpl.n	8004f36 <__swsetup_r+0x7a>
 8004f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f12:	b141      	cbz	r1, 8004f26 <__swsetup_r+0x6a>
 8004f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	d002      	beq.n	8004f22 <__swsetup_r+0x66>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f98f 	bl	8005240 <_free_r>
 8004f22:	2300      	movs	r3, #0
 8004f24:	6363      	str	r3, [r4, #52]	; 0x34
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f043 0308 	orr.w	r3, r3, #8
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	b94b      	cbnz	r3, 8004f56 <__swsetup_r+0x9a>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4c:	d003      	beq.n	8004f56 <__swsetup_r+0x9a>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 f929 	bl	80051a8 <__smakebuf_r>
 8004f56:	89a0      	ldrh	r0, [r4, #12]
 8004f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f5c:	f010 0301 	ands.w	r3, r0, #1
 8004f60:	d00a      	beq.n	8004f78 <__swsetup_r+0xbc>
 8004f62:	2300      	movs	r3, #0
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6963      	ldr	r3, [r4, #20]
 8004f68:	425b      	negs	r3, r3
 8004f6a:	61a3      	str	r3, [r4, #24]
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	b943      	cbnz	r3, 8004f82 <__swsetup_r+0xc6>
 8004f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f74:	d1ba      	bne.n	8004eec <__swsetup_r+0x30>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	0781      	lsls	r1, r0, #30
 8004f7a:	bf58      	it	pl
 8004f7c:	6963      	ldrpl	r3, [r4, #20]
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	e7f4      	b.n	8004f6c <__swsetup_r+0xb0>
 8004f82:	2000      	movs	r0, #0
 8004f84:	e7f7      	b.n	8004f76 <__swsetup_r+0xba>
 8004f86:	bf00      	nop
 8004f88:	20000014 	.word	0x20000014
 8004f8c:	08005418 	.word	0x08005418
 8004f90:	08005438 	.word	0x08005438
 8004f94:	080053f8 	.word	0x080053f8

08004f98 <_close_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d06      	ldr	r5, [pc, #24]	; (8004fb4 <_close_r+0x1c>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	f7fb fe31 	bl	8000c0a <_close>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_close_r+0x1a>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_close_r+0x1a>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20012ea0 	.word	0x20012ea0

08004fb8 <__sflush_r>:
 8004fb8:	898a      	ldrh	r2, [r1, #12]
 8004fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	0710      	lsls	r0, r2, #28
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	d458      	bmi.n	8005078 <__sflush_r+0xc0>
 8004fc6:	684b      	ldr	r3, [r1, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dc05      	bgt.n	8004fd8 <__sflush_r+0x20>
 8004fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dc02      	bgt.n	8004fd8 <__sflush_r+0x20>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	d0f9      	beq.n	8004fd2 <__sflush_r+0x1a>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fe4:	682f      	ldr	r7, [r5, #0]
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	d032      	beq.n	8005050 <__sflush_r+0x98>
 8004fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	075a      	lsls	r2, r3, #29
 8004ff0:	d505      	bpl.n	8004ffe <__sflush_r+0x46>
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	1ac0      	subs	r0, r0, r3
 8004ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ff8:	b10b      	cbz	r3, 8004ffe <__sflush_r+0x46>
 8004ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ffc:	1ac0      	subs	r0, r0, r3
 8004ffe:	2300      	movs	r3, #0
 8005000:	4602      	mov	r2, r0
 8005002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005004:	6a21      	ldr	r1, [r4, #32]
 8005006:	4628      	mov	r0, r5
 8005008:	47b0      	blx	r6
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	d106      	bne.n	800501e <__sflush_r+0x66>
 8005010:	6829      	ldr	r1, [r5, #0]
 8005012:	291d      	cmp	r1, #29
 8005014:	d82c      	bhi.n	8005070 <__sflush_r+0xb8>
 8005016:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <__sflush_r+0x108>)
 8005018:	40ca      	lsrs	r2, r1
 800501a:	07d6      	lsls	r6, r2, #31
 800501c:	d528      	bpl.n	8005070 <__sflush_r+0xb8>
 800501e:	2200      	movs	r2, #0
 8005020:	6062      	str	r2, [r4, #4]
 8005022:	04d9      	lsls	r1, r3, #19
 8005024:	6922      	ldr	r2, [r4, #16]
 8005026:	6022      	str	r2, [r4, #0]
 8005028:	d504      	bpl.n	8005034 <__sflush_r+0x7c>
 800502a:	1c42      	adds	r2, r0, #1
 800502c:	d101      	bne.n	8005032 <__sflush_r+0x7a>
 800502e:	682b      	ldr	r3, [r5, #0]
 8005030:	b903      	cbnz	r3, 8005034 <__sflush_r+0x7c>
 8005032:	6560      	str	r0, [r4, #84]	; 0x54
 8005034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005036:	602f      	str	r7, [r5, #0]
 8005038:	2900      	cmp	r1, #0
 800503a:	d0ca      	beq.n	8004fd2 <__sflush_r+0x1a>
 800503c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005040:	4299      	cmp	r1, r3
 8005042:	d002      	beq.n	800504a <__sflush_r+0x92>
 8005044:	4628      	mov	r0, r5
 8005046:	f000 f8fb 	bl	8005240 <_free_r>
 800504a:	2000      	movs	r0, #0
 800504c:	6360      	str	r0, [r4, #52]	; 0x34
 800504e:	e7c1      	b.n	8004fd4 <__sflush_r+0x1c>
 8005050:	6a21      	ldr	r1, [r4, #32]
 8005052:	2301      	movs	r3, #1
 8005054:	4628      	mov	r0, r5
 8005056:	47b0      	blx	r6
 8005058:	1c41      	adds	r1, r0, #1
 800505a:	d1c7      	bne.n	8004fec <__sflush_r+0x34>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c4      	beq.n	8004fec <__sflush_r+0x34>
 8005062:	2b1d      	cmp	r3, #29
 8005064:	d001      	beq.n	800506a <__sflush_r+0xb2>
 8005066:	2b16      	cmp	r3, #22
 8005068:	d101      	bne.n	800506e <__sflush_r+0xb6>
 800506a:	602f      	str	r7, [r5, #0]
 800506c:	e7b1      	b.n	8004fd2 <__sflush_r+0x1a>
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005074:	81a3      	strh	r3, [r4, #12]
 8005076:	e7ad      	b.n	8004fd4 <__sflush_r+0x1c>
 8005078:	690f      	ldr	r7, [r1, #16]
 800507a:	2f00      	cmp	r7, #0
 800507c:	d0a9      	beq.n	8004fd2 <__sflush_r+0x1a>
 800507e:	0793      	lsls	r3, r2, #30
 8005080:	680e      	ldr	r6, [r1, #0]
 8005082:	bf08      	it	eq
 8005084:	694b      	ldreq	r3, [r1, #20]
 8005086:	600f      	str	r7, [r1, #0]
 8005088:	bf18      	it	ne
 800508a:	2300      	movne	r3, #0
 800508c:	eba6 0807 	sub.w	r8, r6, r7
 8005090:	608b      	str	r3, [r1, #8]
 8005092:	f1b8 0f00 	cmp.w	r8, #0
 8005096:	dd9c      	ble.n	8004fd2 <__sflush_r+0x1a>
 8005098:	6a21      	ldr	r1, [r4, #32]
 800509a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800509c:	4643      	mov	r3, r8
 800509e:	463a      	mov	r2, r7
 80050a0:	4628      	mov	r0, r5
 80050a2:	47b0      	blx	r6
 80050a4:	2800      	cmp	r0, #0
 80050a6:	dc06      	bgt.n	80050b6 <__sflush_r+0xfe>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e78e      	b.n	8004fd4 <__sflush_r+0x1c>
 80050b6:	4407      	add	r7, r0
 80050b8:	eba8 0800 	sub.w	r8, r8, r0
 80050bc:	e7e9      	b.n	8005092 <__sflush_r+0xda>
 80050be:	bf00      	nop
 80050c0:	20400001 	.word	0x20400001

080050c4 <_fflush_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	4605      	mov	r5, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b913      	cbnz	r3, 80050d4 <_fflush_r+0x10>
 80050ce:	2500      	movs	r5, #0
 80050d0:	4628      	mov	r0, r5
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	b118      	cbz	r0, 80050de <_fflush_r+0x1a>
 80050d6:	6983      	ldr	r3, [r0, #24]
 80050d8:	b90b      	cbnz	r3, 80050de <_fflush_r+0x1a>
 80050da:	f7ff fa4f 	bl	800457c <__sinit>
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <_fflush_r+0x6c>)
 80050e0:	429c      	cmp	r4, r3
 80050e2:	d11b      	bne.n	800511c <_fflush_r+0x58>
 80050e4:	686c      	ldr	r4, [r5, #4]
 80050e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ef      	beq.n	80050ce <_fflush_r+0xa>
 80050ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050f0:	07d0      	lsls	r0, r2, #31
 80050f2:	d404      	bmi.n	80050fe <_fflush_r+0x3a>
 80050f4:	0599      	lsls	r1, r3, #22
 80050f6:	d402      	bmi.n	80050fe <_fflush_r+0x3a>
 80050f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050fa:	f7ff fadd 	bl	80046b8 <__retarget_lock_acquire_recursive>
 80050fe:	4628      	mov	r0, r5
 8005100:	4621      	mov	r1, r4
 8005102:	f7ff ff59 	bl	8004fb8 <__sflush_r>
 8005106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005108:	07da      	lsls	r2, r3, #31
 800510a:	4605      	mov	r5, r0
 800510c:	d4e0      	bmi.n	80050d0 <_fflush_r+0xc>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	059b      	lsls	r3, r3, #22
 8005112:	d4dd      	bmi.n	80050d0 <_fflush_r+0xc>
 8005114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005116:	f7ff fad0 	bl	80046ba <__retarget_lock_release_recursive>
 800511a:	e7d9      	b.n	80050d0 <_fflush_r+0xc>
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <_fflush_r+0x70>)
 800511e:	429c      	cmp	r4, r3
 8005120:	d101      	bne.n	8005126 <_fflush_r+0x62>
 8005122:	68ac      	ldr	r4, [r5, #8]
 8005124:	e7df      	b.n	80050e6 <_fflush_r+0x22>
 8005126:	4b04      	ldr	r3, [pc, #16]	; (8005138 <_fflush_r+0x74>)
 8005128:	429c      	cmp	r4, r3
 800512a:	bf08      	it	eq
 800512c:	68ec      	ldreq	r4, [r5, #12]
 800512e:	e7da      	b.n	80050e6 <_fflush_r+0x22>
 8005130:	08005418 	.word	0x08005418
 8005134:	08005438 	.word	0x08005438
 8005138:	080053f8 	.word	0x080053f8

0800513c <_lseek_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d07      	ldr	r5, [pc, #28]	; (800515c <_lseek_r+0x20>)
 8005140:	4604      	mov	r4, r0
 8005142:	4608      	mov	r0, r1
 8005144:	4611      	mov	r1, r2
 8005146:	2200      	movs	r2, #0
 8005148:	602a      	str	r2, [r5, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f7fb fd84 	bl	8000c58 <_lseek>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_lseek_r+0x1e>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_lseek_r+0x1e>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20012ea0 	.word	0x20012ea0

08005160 <__swhatbuf_r>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	460e      	mov	r6, r1
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	2900      	cmp	r1, #0
 800516a:	b096      	sub	sp, #88	; 0x58
 800516c:	4614      	mov	r4, r2
 800516e:	461d      	mov	r5, r3
 8005170:	da07      	bge.n	8005182 <__swhatbuf_r+0x22>
 8005172:	2300      	movs	r3, #0
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	89b3      	ldrh	r3, [r6, #12]
 8005178:	061a      	lsls	r2, r3, #24
 800517a:	d410      	bmi.n	800519e <__swhatbuf_r+0x3e>
 800517c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005180:	e00e      	b.n	80051a0 <__swhatbuf_r+0x40>
 8005182:	466a      	mov	r2, sp
 8005184:	f000 f8be 	bl	8005304 <_fstat_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	dbf2      	blt.n	8005172 <__swhatbuf_r+0x12>
 800518c:	9a01      	ldr	r2, [sp, #4]
 800518e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005196:	425a      	negs	r2, r3
 8005198:	415a      	adcs	r2, r3
 800519a:	602a      	str	r2, [r5, #0]
 800519c:	e7ee      	b.n	800517c <__swhatbuf_r+0x1c>
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	2000      	movs	r0, #0
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	b016      	add	sp, #88	; 0x58
 80051a6:	bd70      	pop	{r4, r5, r6, pc}

080051a8 <__smakebuf_r>:
 80051a8:	898b      	ldrh	r3, [r1, #12]
 80051aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051ac:	079d      	lsls	r5, r3, #30
 80051ae:	4606      	mov	r6, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	d507      	bpl.n	80051c4 <__smakebuf_r+0x1c>
 80051b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	2301      	movs	r3, #1
 80051be:	6163      	str	r3, [r4, #20]
 80051c0:	b002      	add	sp, #8
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	ab01      	add	r3, sp, #4
 80051c6:	466a      	mov	r2, sp
 80051c8:	f7ff ffca 	bl	8005160 <__swhatbuf_r>
 80051cc:	9900      	ldr	r1, [sp, #0]
 80051ce:	4605      	mov	r5, r0
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff fa73 	bl	80046bc <_malloc_r>
 80051d6:	b948      	cbnz	r0, 80051ec <__smakebuf_r+0x44>
 80051d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051dc:	059a      	lsls	r2, r3, #22
 80051de:	d4ef      	bmi.n	80051c0 <__smakebuf_r+0x18>
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	e7e3      	b.n	80051b4 <__smakebuf_r+0xc>
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <__smakebuf_r+0x7c>)
 80051ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	6020      	str	r0, [r4, #0]
 80051f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	6163      	str	r3, [r4, #20]
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	6120      	str	r0, [r4, #16]
 8005202:	b15b      	cbz	r3, 800521c <__smakebuf_r+0x74>
 8005204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005208:	4630      	mov	r0, r6
 800520a:	f000 f88d 	bl	8005328 <_isatty_r>
 800520e:	b128      	cbz	r0, 800521c <__smakebuf_r+0x74>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	81a3      	strh	r3, [r4, #12]
 800521c:	89a0      	ldrh	r0, [r4, #12]
 800521e:	4305      	orrs	r5, r0
 8005220:	81a5      	strh	r5, [r4, #12]
 8005222:	e7cd      	b.n	80051c0 <__smakebuf_r+0x18>
 8005224:	08004515 	.word	0x08004515

08005228 <__malloc_lock>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__malloc_lock+0x8>)
 800522a:	f7ff ba45 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	20012e98 	.word	0x20012e98

08005234 <__malloc_unlock>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__malloc_unlock+0x8>)
 8005236:	f7ff ba40 	b.w	80046ba <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	20012e98 	.word	0x20012e98

08005240 <_free_r>:
 8005240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005242:	2900      	cmp	r1, #0
 8005244:	d048      	beq.n	80052d8 <_free_r+0x98>
 8005246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800524a:	9001      	str	r0, [sp, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f1a1 0404 	sub.w	r4, r1, #4
 8005252:	bfb8      	it	lt
 8005254:	18e4      	addlt	r4, r4, r3
 8005256:	f7ff ffe7 	bl	8005228 <__malloc_lock>
 800525a:	4a20      	ldr	r2, [pc, #128]	; (80052dc <_free_r+0x9c>)
 800525c:	9801      	ldr	r0, [sp, #4]
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	4615      	mov	r5, r2
 8005262:	b933      	cbnz	r3, 8005272 <_free_r+0x32>
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	6014      	str	r4, [r2, #0]
 8005268:	b003      	add	sp, #12
 800526a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800526e:	f7ff bfe1 	b.w	8005234 <__malloc_unlock>
 8005272:	42a3      	cmp	r3, r4
 8005274:	d90b      	bls.n	800528e <_free_r+0x4e>
 8005276:	6821      	ldr	r1, [r4, #0]
 8005278:	1862      	adds	r2, r4, r1
 800527a:	4293      	cmp	r3, r2
 800527c:	bf04      	itt	eq
 800527e:	681a      	ldreq	r2, [r3, #0]
 8005280:	685b      	ldreq	r3, [r3, #4]
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	bf04      	itt	eq
 8005286:	1852      	addeq	r2, r2, r1
 8005288:	6022      	streq	r2, [r4, #0]
 800528a:	602c      	str	r4, [r5, #0]
 800528c:	e7ec      	b.n	8005268 <_free_r+0x28>
 800528e:	461a      	mov	r2, r3
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	b10b      	cbz	r3, 8005298 <_free_r+0x58>
 8005294:	42a3      	cmp	r3, r4
 8005296:	d9fa      	bls.n	800528e <_free_r+0x4e>
 8005298:	6811      	ldr	r1, [r2, #0]
 800529a:	1855      	adds	r5, r2, r1
 800529c:	42a5      	cmp	r5, r4
 800529e:	d10b      	bne.n	80052b8 <_free_r+0x78>
 80052a0:	6824      	ldr	r4, [r4, #0]
 80052a2:	4421      	add	r1, r4
 80052a4:	1854      	adds	r4, r2, r1
 80052a6:	42a3      	cmp	r3, r4
 80052a8:	6011      	str	r1, [r2, #0]
 80052aa:	d1dd      	bne.n	8005268 <_free_r+0x28>
 80052ac:	681c      	ldr	r4, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	6053      	str	r3, [r2, #4]
 80052b2:	4421      	add	r1, r4
 80052b4:	6011      	str	r1, [r2, #0]
 80052b6:	e7d7      	b.n	8005268 <_free_r+0x28>
 80052b8:	d902      	bls.n	80052c0 <_free_r+0x80>
 80052ba:	230c      	movs	r3, #12
 80052bc:	6003      	str	r3, [r0, #0]
 80052be:	e7d3      	b.n	8005268 <_free_r+0x28>
 80052c0:	6825      	ldr	r5, [r4, #0]
 80052c2:	1961      	adds	r1, r4, r5
 80052c4:	428b      	cmp	r3, r1
 80052c6:	bf04      	itt	eq
 80052c8:	6819      	ldreq	r1, [r3, #0]
 80052ca:	685b      	ldreq	r3, [r3, #4]
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	bf04      	itt	eq
 80052d0:	1949      	addeq	r1, r1, r5
 80052d2:	6021      	streq	r1, [r4, #0]
 80052d4:	6054      	str	r4, [r2, #4]
 80052d6:	e7c7      	b.n	8005268 <_free_r+0x28>
 80052d8:	b003      	add	sp, #12
 80052da:	bd30      	pop	{r4, r5, pc}
 80052dc:	20012dfc 	.word	0x20012dfc

080052e0 <_read_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d07      	ldr	r5, [pc, #28]	; (8005300 <_read_r+0x20>)
 80052e4:	4604      	mov	r4, r0
 80052e6:	4608      	mov	r0, r1
 80052e8:	4611      	mov	r1, r2
 80052ea:	2200      	movs	r2, #0
 80052ec:	602a      	str	r2, [r5, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7fb fc52 	bl	8000b98 <_read>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_read_r+0x1e>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_read_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20012ea0 	.word	0x20012ea0

08005304 <_fstat_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4d07      	ldr	r5, [pc, #28]	; (8005324 <_fstat_r+0x20>)
 8005308:	2300      	movs	r3, #0
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	f7fb fc86 	bl	8000c22 <_fstat>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	d102      	bne.n	8005320 <_fstat_r+0x1c>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	b103      	cbz	r3, 8005320 <_fstat_r+0x1c>
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	bd38      	pop	{r3, r4, r5, pc}
 8005322:	bf00      	nop
 8005324:	20012ea0 	.word	0x20012ea0

08005328 <_isatty_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d06      	ldr	r5, [pc, #24]	; (8005344 <_isatty_r+0x1c>)
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	4608      	mov	r0, r1
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f7fb fc85 	bl	8000c42 <_isatty>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_isatty_r+0x1a>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_isatty_r+0x1a>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	20012ea0 	.word	0x20012ea0

08005348 <_sbrk>:
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <_sbrk+0x14>)
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	4602      	mov	r2, r0
 800534e:	b909      	cbnz	r1, 8005354 <_sbrk+0xc>
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <_sbrk+0x18>)
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	4402      	add	r2, r0
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	4770      	bx	lr
 800535c:	20012e04 	.word	0x20012e04
 8005360:	20012ea8 	.word	0x20012ea8

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
